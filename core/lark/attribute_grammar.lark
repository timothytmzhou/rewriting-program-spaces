# Defines input format for grammars. Similar to BNF-only subset of Lark with actions.

start: (_item? _NL)* _item?

_item: rule
     | token
     | statement

rule: RULE ":" expansions
token: TOKEN ":" REGEXP

# TODO: handle %import statements?
statement: "%ignore" TOKEN -> ignore

!import_path: "."? name ("." name)*
name_list: "(" name ("," name)* ")"

expansions: expansion (_VBAR expansion)*

expansion: expr* ["{" action "}"]

action: CONSTRUCTOR

CONSTRUCTOR: /[A-Z][_a-z0-9]*/

?expr: atom

?atom: "(" expansions ")"
     | value

?value: STRING ".." STRING -> literal_range
      | name
      | (REGEXP | STRING) -> literal

name: RULE -> nonterminal
    | TOKEN -> terminal

_VBAR: _NL? "|"
RULE: /[a-z][_a-z0-9]*/
TOKEN: /_?[A-Z][_A-Z0-9]*/
STRING: _STRING "i"?
REGEXP: /\/(?!\/)(\\\/|\\\\|[^\/])*?\/[imslux]*/
_NL: /(\r?\n)+\s*/

%import common.ESCAPED_STRING -> _STRING
%import common.SIGNED_INT -> NUMBER
%import common.WS_INLINE

COMMENT: /\s*/ "//" /[^\n]/* | /\s*/ "#" /[^\n]/*

%ignore WS_INLINE
%ignore COMMENT