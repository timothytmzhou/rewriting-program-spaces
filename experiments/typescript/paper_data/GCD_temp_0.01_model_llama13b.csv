did_compile,benchmark_id,benchmark_name,temperature,execution_time,llm_finished,output,total_realizability_time,num_tokens_guessed,num_tokens_generated,tries_per_token,timed_out
True,0,mbpp_80_tetrahedral_number,0.01,21.414582014083862,True," ```
function tetrahedral_number(n: number): number {
    let result: number = 0;
    
    if (n === 1) {
        result = 1;
    } else {
        const previousNumber: number = tetrahedral_number(n - 1);
        result = previousNumber * 2 + 1;
    }
    
    return result;
}
```",13.421823024749756,100,99,"Counter({(1, 98): 1, (2, 1): 1})",False
False,1,mbpp_392_get_max_sum,0.01,169.28381395339966,False," ```
function get_max_sum(n: number): number {
	if (n <= 0) {
		return 0;
	} else if (n === 1 || n === 2 || n === 3 || n === 4 || n === 5) {
		return n;
	} else {
		const halfNums: number = Math.floor(n / 2);
		const thirdNums: number = Math.floor(n / 3);
		const quarterNums: number = Math.floor(n / 4);
		const fifthNums: number = Math.floor(nâ€Œ",137.8271346092224,400,146,"Counter({(1, 142): 1, (2, 3): 1, (3, 1): 1})",True
True,2,mbpp_171_perimeter_pentagon,0.01,3.6422510147094727,True," ```
function perimeter_pentagon(sideLength: number) :number{
return sideLength *5;}
```",0.6075732707977295,28,28,"Counter({(1, 28): 1})",False
True,3,mbpp_127_multiply_int,0.01,3.960623264312744,True," ```
function multiply_int(x: number, y: number): number {
    return x * y;
}
```",0.8094265460968018,30,30,"Counter({(1, 30): 1})",False
True,4,mbpp_435_last_Digit,0.01,3.764258861541748,True," ```
function last_Digit(n: number): number {
    return n % 10;
}
```",0.6799137592315674,28,28,"Counter({(1, 28): 1})",False
True,5,mbpp_287_square_Sum,0.01,13.805901527404783,True," ```
function square_Sum(n: number): number {
    let result: number = 0;
    
    for (let i: number = 1; i <= n; i += 2) {
        result += Math.pow(i, 2);
    }
    
    return result;
}
```",7.427846670150757,77,76,"Counter({(1, 75): 1, (2, 1): 1})",False
True,6,mbpp_606_radian_degree,0.01,6.62164044380188,True," ```
function radian_degree(degree: number): number {
    const PI: number = Math.PI;
    return degree * (PI / 180);
}
```",2.244413137435913,48,47,"Counter({(1, 46): 1, (2, 1): 1})",False
True,7,mbpp_803_is_perfect_square,0.01,11.62165594100952,True," ```
function is_perfect_square(n: number): boolean {
    let sqrtN: number = Math.sqrt(n);
    if (Math.pow(sqrtN, 2) === n) {
        return true;
    } else {
        return false;
    }
}
```",5.000770568847656,75,73,"Counter({(1, 71): 1, (2, 2): 1})",False
True,8,mbpp_731_lateralsurface_cone,0.01,59.10632014274597,True," ```
function lateralsurface_cone(r: number, h: number): number {
    const baseArea: number = Math.PI * (r * r); // Area of the circular base
    const slantHeight: number = Math.sqrt((h*h) + (r*r)); // Slant height from the center of the circle to the top of the cone
    const sideArea: number = baseArea * slantHeight; // Side area of the triangle formed by the base and the slant height
    
    return 2 * (baseArea + sideArea); // Total lateral surface area is twice the sum of the base area and side area
}
```",46.9108476638794,156,151,"Counter({(1, 147): 1, (2, 3): 1, (3, 1): 1})",False
True,9,mbpp_581_surface_Area,0.01,10.14237904548645,True," ```
function surface_Area(baseEdge: number, height: number): number {
    const sideLength: number = Math.sqrt((height * height) / (12));
    return (4 * sideLength * baseEdge);
}
```",4.994384765625,58,57,"Counter({(1, 56): 1, (2, 1): 1})",False
True,10,mbpp_135_hexagonal_num,0.01,5.584166526794434,True," ```
function hexagonal_num(n: number) :number{
return (2*n-1)*(2*n-3)/4;}
```",1.8759238719940183,38,37,"Counter({(1, 36): 1, (2, 1): 1})",False
True,11,mbpp_739_find_Index,0.01,30.45288586616516,True," ```
function find_Index(n: number): number {
    let i: number = 1;
    while (i < Math.pow(10, n)) {
        if ((Math.floor((Math.sqrt(8 * i + 1) - 1) / 2))) {
            break;
        } else {
            i++;
        }
    }
    return i;
}
```",22.145760774612427,99,97,"Counter({(1, 95): 1, (2, 2): 1})",False
True,12,mbpp_17_square_perimeter,0.01,3.966947555541992,True," ```
function square_perimeter(sideLength: number) :number{
return (4*sideLength);
}
```",0.7812595367431641,30,29,"Counter({(1, 28): 1, (2, 1): 1})",False
True,13,mbpp_77_is_Diff,0.01,4.426201343536377,True," ```
function is_Diff(n: number): boolean {
    return n % 11 === 0;
}
```",0.833716869354248,36,36,"Counter({(1, 36): 1})",False
True,14,mbpp_126_sum,0.01,26.20454955101013,True," ```
function sum(a: number, b: number): number {
    let result: number = 0;
    
    // Iterate through all possible divisors from 1 to min(a, b)
    for (let i: number = 1; i <= Math.min(a, b); i++) {
        if ((a % i === 0 && b % i === 0)) {
            result += i;
        }
    }
    
    return result;
}
```",16.596256494522095,121,120,"Counter({(1, 119): 1, (2, 1): 1})",False
True,15,mbpp_266_lateralsurface_cube,0.01,19.40437626838684,True," ```
function lateralsurface_cube(l: number): number {
    const sidelength: number = Math.pow(l, 2);
    const perimeter: number = (4 * sidelength) / 3;
    const area: number = perimeter * sidelength;
    return area;
}
```",12.70981740951538,81,79,"Counter({(1, 77): 1, (2, 2): 1})",False
True,16,mbpp_797_sum_in_range,0.01,19.081430912017822,True," ```
function sum_in_range(l: number, r: number): number {
    let result: number = 0;
    
    // Iterate over each number between l and r (both inclusive)
    for (let i: number = l; i <= r; i++) {
        if (i % 2 === 1) {
            result += i;
        }
    }
    
    return result;
}
```",10.767770051956177,105,104,"Counter({(1, 103): 1, (2, 1): 1})",False
True,17,mbpp_3_is_not_prime,0.01,50.66670846939087,True," ```
function is_not_prime(n: number): boolean {
    if (n <= 1) {
        return true;
    } else if (n === 2 || n === 3) {
        return false;
    } else {
        let i: number = 5;
        while (i * i <= n) {
            if (n % i == 0 || n % (i + 2) == 0) {
                return true;
            }
            i += 6;
        }
        return false;
    }
}
```",40.285874366760254,134,133,"Counter({(1, 132): 1, (2, 1): 1})",False
True,18,mbpp_458_rectangle_area,0.01,4.096012353897095,True," ```
function rectangle_area(length: number, breadth: number) :number{
return length*breadth;}
```",0.8776090145111084,30,30,"Counter({(1, 30): 1})",False
True,19,mbpp_441_surfacearea_cube,0.01,3.683800220489502,True," ```
function surfacearea_cube(length: number) :number{
return length * length *6;}
```",0.6763832569122314,27,27,"Counter({(1, 27): 1})",False
True,20,mbpp_162_sum_series,0.01,15.233827352523804,True," ```
function sum_series(n: number): number {
    let result: number = 0;
    
    for (let i: number = 0; i < Math.floor(n / 2); i++) {
        result += n - 2 * i;
    }
    
    return result;
}
```",8.33516550064087,79,78,"Counter({(1, 77): 1, (2, 1): 1})",False
True,21,mbpp_448_cal_sum,0.01,96.24600887298584,True," ```
function cal_sum(n: number): number {
    let result: number = 0;
    
    if (n === 1) {
        result += n;
    } else {
        const previousResult: number = cal_sum(n - 1);
        
        // Calculate the current Perrin number
        const currentPerrinNumber: number = Math.pow((2 * n), 3) / ((n % 2 == 0 ? 4 : 6) * Math.sqrt(Math.abs(n)));
        
        // Add the current Perrin number to the total
        result += currentPerrinNumber;
        
        // Recursively call the function on the next iteration
        result += cal_sum(previousResult);
    }
    
    return result;
}
```",81.74903583526611,191,190,"Counter({(1, 189): 1, (2, 1): 1})",False
True,22,mbpp_738_geometric_sum,0.01,11.32534646987915,True," ```
function geometric_sum(n: number) :number{
if (n == 0){return 0;}
else if (n==1){return 1;}
else{return geometricSum(n - 1)+geometricSum(n -2);}}
```",5.687474250793457,62,62,"Counter({(1, 62): 1})",False
True,23,mbpp_239_get_total_number_of_sequences,0.01,69.0633773803711,True," ```
function get_total_number_of_sequences(m: number, n: number): number {
    if (n === 1) {
        return Math.floor((m - 2) / 3);
    } else {
        let totalSequences: number = 0;
        for (let i: number = 2; i <= m; i++) {
            const numSequences: number = get_total_number_of_sequences(i, n - 1);
            totalSequences += numSequences;
        }
        return totalSequences;
    }
}
```",57.46845269203186,145,142,"Counter({(1, 139): 1, (2, 3): 1})",False
True,24,mbpp_59_is_octagonal,0.01,5.47725772857666,True," ```
function is_octagonal(n: number) :number{
return (Math.sqrt((8*n)+1))-1;}
```",1.7908077239990234,36,35,"Counter({(1, 34): 1, (2, 1): 1})",False
True,25,mbpp_638_wind_chill,0.01,32.35948920249939,True," ```
function wind_chill(windSpeedKmH: number, tempCelsius: number) :number{
let result: number = Math.round((35.74+0.6215*tempCelsius-35.75*(Math.pow(windSpeedKmH,0.16))+0.4275*tempCelsius*(Math.pow(windSpeedKmH,0.16))) * 10)/10;
return result;}
```",22.32468628883361,124,122,"Counter({(1, 121): 1, (3, 1): 1})",False
True,26,mbpp_577_last_Digit_Factorial,0.01,14.967531681060793,True," ```
function last_Digit_Factorial(n: number): number {
    let result: number = n % 10;
    
    while (n > 1) {
        n *= (n - 1);
        result = n % 10;
    }
    
    return result;
}
```",8.061029434204102,84,80,"Counter({(1, 77): 1, (2, 2): 1, (3, 1): 1})",False
False,27,mbpp_84_sequence,0.01,95.39604330062866,True," ```
function sequence(n: number): number {
    if (n <= 0) {
        throwError();
    } else if (n === 1 || n === 2) {
        return n;
    } else {
        let previousNumber1: number = 1;
        let previousNumber2: number = 2;
        
        for (let i: number = 3; i < n; i++) {
            const currentNumber: number = previousNumber1 + previousNumber2;
            
            previousNumber1 = previousNumber2;
            previousNumber2 = currentNumber;
        }
        
        return previousNumber2;
    }
}
```",82.15564584732056,173,156,"Counter({(1, 150): 1, (11, 1): 1, (4, 1): 1, (2, 4): 1})",False
True,28,mbpp_724_power_base_sum,0.01,13.271545648574827,True," ```
function power_base_sum(base: number, power: number): number {
    let result: number = 0;
    
    while (power > 0) {
        result += Math.pow(base, power);
        power++;
    }
    
    return result;
}
```",7.000835418701172,75,71,"Counter({(1, 69): 1, (2, 1): 1, (4, 1): 1})",False
True,29,mbpp_641_is_nonagonal,0.01,7.1699395179748535,True," ```
function is_nonagonal(n: number) :number{
return (Math.pow((3*n)-2,(1/3))+1)/2;}
```",3.127175807952881,42,41,"Counter({(1, 40): 1, (2, 1): 1})",False
True,30,mbpp_279_is_num_decagonal,0.01,71.0409243106842,True," ```
function is_num_decagonal(n: number): number {
    let result: number = 0;
    
    if (n <= 1) {
        result = n;
    } else {
        const nums: number = Math.floor((Math.sqrt(8 * n + 1) - 1) / 2);
        
        if ((nums % 2 === 0 && nums >= n) || (nums % 2 !== 0 && nums > n)) {
            result = nums;
        } else {
            result = nums - 1;
        }
    }
    
    return result;
}
```",58.50954580307007,163,159,"Counter({(1, 156): 1, (2, 2): 1, (3, 1): 1})",False
True,31,mbpp_72_dif_Square,0.01,10.992230892181396,True," ```
function dif_Square(n: number): boolean {
    let sqrtN: number = Math.sqrt(n);
    
    if (Math.floor(sqrtN) === sqrtN) {
        return true;
    } else {
        return false;
    }
}
```",4.477597236633301,76,74,"Counter({(1, 72): 1, (2, 2): 1})",False
False,32,mbpp_781_count_divisors,0.01,87.95068168640137,False," ```
function count_divisors(n: number) :boolean{
let i:number =0;
while (i < n){
if (n % i == 0){
count++;
}
i++

If (count%2==0)
   //return true if count is even
   //else false
   //return false;











































































































































































































































































",58.14630556106568,400,347,"Counter({(1, 323): 1, (3, 5): 1, (7, 1): 1, (8, 1): 1, (2, 13): 1, (5, 3): 1, (6, 1): 1})",False
True,33,mbpp_309_maximum,0.01,6.623989105224609,True," ```
function maximum(a: number, b: number): number {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}
```",2.189995050430298,48,48,"Counter({(1, 48): 1})",False
True,34,mbpp_295_sum_div,0.01,15.096597671508787,True," ```
function sum_div(n: number) : number{
return n === 1 ? 0 : (sumDivisors(Math.floor(n / 2)) + sumDivisors((n - Math.floor(n / 2)))) % n == 0 ? n : 0;}
```",8.830732107162476,73,72,"Counter({(1, 71): 1, (2, 1): 1})",False
True,35,mbpp_14_find_Volume,0.01,6.39044189453125,True," ```
function find_Volume(l: number, b: number, h: number): number {
    return (1 / 3) * l * b * h;
}
```",2.293362855911255,43,43,"Counter({(1, 43): 1})",False
True,36,mbpp_167_next_power_of_2,0.01,5.707446813583374,True," ```
function next_power_of_2(n: number) :number{
return Math.pow(2,Math.ceil(Math.log2(n)));
}
```",1.7255096435546875,41,40,"Counter({(1, 39): 1, (2, 1): 1})",False
True,37,mbpp_600_is_Even,0.01,7.366116762161255,True," ```
function is_Even(n: number): boolean {
    if (n % 2 === 0) {
        return true;
    } else {
        return false;
    }
}
```",2.6376967430114746,50,50,"Counter({(1, 50): 1})",False
True,38,mbpp_742_area_tetrahedron,0.01,42.718780517578125,True," ```
function area_tetrahedron(side: number): number {
    const height: number = Math.sqrt((3 * side * side) / (2 * 1));
    const baseArea: number = (Math.pow(height, 2)) / (4 * Math.tan(Math.PI / 6));
    const totalArea: number = baseArea * 4;
    
    return totalArea;
}
```",34.15622305870056,105,101,"Counter({(1, 98): 1, (2, 2): 1, (3, 1): 1})",False
True,39,mbpp_432_median_trapezium,0.01,24.019827127456665,True," ```
function median_trapezium(base1: number, base2: number, height: number): number {
    const perimeter: number = (base1 + base2) * 2;
    const area: number = ((base1 + base2) / 2) * height;
    return Math.sqrt((perimeter * perimeter - 4 * area));
}
```",16.62196397781372,91,89,"Counter({(1, 87): 1, (2, 2): 1})",False
True,40,mbpp_234_volume_cube,0.01,4.408754110336304,True," ```
function volume_cube(l: number): number {
    return Math.pow(l, 3);
}
```",1.0524892807006836,32,32,"Counter({(1, 32): 1})",False
True,41,mbpp_422_find_Average_Of_Cube,0.01,14.113144636154177,True," ```
function find_Average_Of_Cube(n: number): number {
    let total: number = 0;
    for (let i: number = 1; i <= n; i++) {
        total += Math.pow(i, 3);
    }
    return total / n;
}
```",7.4947669506073,78,77,"Counter({(1, 76): 1, (2, 1): 1})",False
True,42,mbpp_292_find,0.01,4.54296350479126,True," ```
function find(n: number, m: number): number {
    return Math.floor(n / m);
}
```",1.1791350841522217,32,32,"Counter({(1, 32): 1})",False
False,43,mbpp_389_find_lucas,0.01,39.89268112182617,True," ```
function find_lucas(n: number) :number{
let result:number=2;
if (n==0){return 2;}
else if (n==1){return 1;}
for (var  = 3 ; i <= n ;i++){result=(result+findLucas(i-1))*findLucas(i-2);}
return result;
}
```",29.722187042236328,127,95,"Counter({(1, 91): 1, (3, 1): 1, (2, 1): 1, (19, 1): 1, (12, 1): 1})",False
True,44,mbpp_227_min_of_three,0.01,14.114214658737184,True," ```
function min_of_three(a: number, b: number, c: number): number {
    if (a < b && a < c) {
        return a;
    } else if (b < a && b < c) {
        return b;
    } else {
        return c;
    }
}
```",7.410367965698242,80,80,"Counter({(1, 80): 1})",False
True,45,mbpp_388_highest_Power_of_2,0.01,8.780396461486816,True," ```
function highest_Power_of_2(n: number) :number{
let i:number=1;
while (i<=n){
i*=2;
}
return i-1;
}
```",3.8665425777435294,55,53,"Counter({(1, 52): 1, (3, 1): 1})",False
True,46,mbpp_271_even_Power_Sum,0.01,29.984971523284912,True," ```
function even_Power_Sum(n: number): number {
    let result: number = 0;
    
    // Iterate from 2 to n
    for (let i: number = 2; i <= n; i += 1) {
        // Calculate the current term as the ith even number raised to the fifth power
        const term: number = Math.pow(i * 2, 5);
        
        // Add the current term to the running total
        result += term;
    }
    
    return result;
}
```",19.68813705444336,133,132,"Counter({(1, 131): 1, (2, 1): 1})",False
False,47,mbpp_67_bell_number,0.01,160.18622136116028,False," ```
function bellNumber(n: number) : number{
let result: number = 0;
for (let i: number = 1; i <= n; i++) {
result += binomialCoefficient(i - 1, n);
}
return result;
}

function binomialCoefficient(m: number, n: number): number {
if (m < n || m > n) {
throwError();
} else if (m === n) {
return 1;
} else {
return factorial(m)/factorial(n-m)*factorial(m-n);
}
}

function throwError(): number {
consoleLogError();
processExitCode(1);
}

function consoleLogError() : number {
consoleLogMessage();
}

function processExitCode(code: number): number {
exitProcess(code);
}

function exitProcess(code: number): number {
processEnd(INT",129.93869948387146,400,220,"Counter({(1, 203): 1, (2, 8): 1, (3, 3): 1, (14, 1): 1, (6, 1): 1, (5, 1): 1, (4, 3): 1})",True
True,48,mbpp_274_even_binomial_Coeff_Sum,0.01,19.767507553100582,True," ```
function even_binomial_Coeff_Sum(n: number) :number{
let result:number=0;
for (let i:number =1 ;i<=n;i+=2){
result+=(Math.pow((1+i),n)/(i*i));
}
return result;
}
```",12.590338706970217,82,76,"Counter({(1, 72): 1, (3, 2): 1, (2, 2): 1})",False
True,49,mbpp_86_centered_hexagonal_number,0.01,6.244941711425781,True," ```
function centered_hexagonal_number(n: number) : number{
return (2*n-1)*(2*n-3)/6;}
```",2.068204879760742,41,39,"Counter({(1, 37): 1, (2, 2): 1})",False
True,50,mbpp_574_surfacearea_cylinder,0.01,8.334821462631226,True," ```
function surfacearea_cylinder(radius: number, height: number) :number{
return (2*Math.PI * radius * height)+(2* Math.PI*(radius*radius));
}
```",3.4823901653289795,54,50,"Counter({(1, 49): 1, (5, 1): 1})",False
False,51,mbpp_430_parabola_directrix,0.01,169.05278062820437,False," ```
function parabola_directrix(a: number, b: number, c: number): number {
    const vertex_x: number = (4 * a) / (b * b);
    const vertex_y: number = ((2 * a * c) - (b * b)) / (4 * a);
    const focus_x: number = vertex_x - (b / (2 * a));
    const focus_y: number = vertex_y;
    const directrix_slope: number = (focus_y - vertex_y â€“",138.45419025421145,400,127,"Counter({(1, 118): 1, (2, 5): 1, (4, 3): 1, (3, 1): 1})",True
True,52,mbpp_406_find_Parity,0.01,6.771390199661255,True," ```
function find_Parity(x: number): boolean {
    if (x % 2 === 0) {
        return false;
    } else {
        return true;
    }
}
```",2.138721704483032,51,51,"Counter({(1, 51): 1})",False
True,53,mbpp_605_prime_num,0.01,15.933085203170776,True," ```
function prime_num(num: number): boolean {
    let i: number = 2;
    while (i <= Math.sqrt(num)) {
        if (num % i === 0) {
            return false;
        } else {
            i++;
        }
    }
    return true;
}
```",9.325759887695312,80,79,"Counter({(1, 78): 1, (2, 1): 1})",False
True,54,mbpp_264_dog_age,0.01,11.460565567016602,True," ```
function dog_age(h_age: number): number {
    const DOG_YEARS_PER_HUMAN_YEAR: number = 7; // Assuming an average human-to-dog ratio of 7:1
    
    return h_age * DOG_YEARS_PER_HUMAN_YEAR;
}
```",4.387897729873657,87,85,"Counter({(1, 83): 1, (2, 2): 1})",False
True,55,mbpp_770_odd_num_sum,0.01,13.886651992797852,True," ```
function odd_num_sum(n: number): number {
    let result: number = 0;
    
    for (let i: number = 1; i <= n; i += 2) {
        result += Math.pow(i, 4);
    }
    
    return result;
}
```",7.330873489379883,79,78,"Counter({(1, 77): 1, (2, 1): 1})",False
True,56,mbpp_453_sumofFactors,0.01,16.30817699432373,True," ```
function sumofFactors(n: number) :number{
let result:number =0 ;
for ( let i:number=2;i<=Math.sqrt(n);i++){
if ( n%i==0){
result+=i+n/i;
}}return result;}
```",9.99619436264038,76,72,"Counter({(1, 70): 1, (3, 2): 1})",False
True,57,mbpp_244_next_Perfect_Square,0.01,9.40549921989441,True," ```
function next_Perfect_Square(n: number) :number{
let i:number=1;
while (i*i<= n){
i++;
}
return i*i;
}
```",4.60141921043396,53,51,"Counter({(1, 50): 1, (3, 1): 1})",False
True,58,mbpp_93_power,0.01,13.52026891708374,True," ```
function power(a: number, b: number): number {
    let result: number = 1;
    
    while (b > 0) {
        result *= a;
        b-1;
    }
    
    return result;
}
```",7.1373937129974365,76,66,"Counter({(1, 62): 1, (2, 2): 1, (4, 1): 1, (6, 1): 1})",False
False,59,mbpp_291_count_no_of_ways,0.01,165.2752604484558,False," ```
function count_no_of_ways(n: number, k: number): number {
    if (k === 1) { // base case: only one color available
        return 1;
    } else if (n <= 0 || k <= 0) { // invalid input
        throwError();
    } else {
        let noOfWaysToPaintFenceWithTwoAdjacentPostsHavingDifferentColors: number = 0;
        
        for (let i: number = 0; i < n - 1; i++) {
            const firstColorIndex: number = Math.floor(Math.random() * k);
            
            for (let j: number = i + 1; j < n; j++) {
                const secondColorIndex: number = fr",133.9345316886902,400,180,"Counter({(1, 173): 1, (9, 1): 1, (3, 1): 1, (2, 5): 1})",True
False,60,mbpp_637_noprofit_noloss,0.01,12.638912200927734,True," ```
function noprofit_noloss(actual_cost: number, sale_amount: number): boolean {
    const profitLossAmount: number = actualCost - saleAmount;
    if (profitLossAmount === 0) {
        return true;
    } else {
        return false;
    }
}
```",5.856362342834473,82,79,"Counter({(1, 76): 1, (2, 3): 1})",False
True,61,mbpp_293_otherside_rightangle,0.01,9.417455673217772,True," ```
function otherside_rightangle(w: number, h: number): number {
    const hypotenuse: number = Math.sqrt((w * w) + (h * h));
    return hypotenuse;
}
```",4.421134471893311,56,55,"Counter({(1, 54): 1, (2, 1): 1})",False
True,62,mbpp_592_sum_Of_product,0.01,12.185163021087646,True," ```
function sum_Of_product(n: number) :number{
let result:number=1;
for (let i:number =0 ;i < n; i++){
result*=(2 * i+1);
}
return result;
}
```",6.57100772857666,65,62,"Counter({(1, 60): 1, (3, 1): 1, (2, 1): 1})",False
True,63,mbpp_256_count_Primes_nums,0.01,121.35334062576294,True," ```
function count_Primes_nums(n: number): number {
    let numOfPrimeNums: number = 0;
    
    if (n <= 1) {
        return numOfPrimeNums;
    } else {
        for (let i: number = 2; i < n; i++) {
            if (isPrimeNum(i)) {
                numOfPrimeNums++;
            }
        }
        
        return numOfPrimeNums;
    }
}

function isPrimeNum(num: number): boolean {
    if (num === 1 || num === 0) {
        return false;
    } else {
        for (let j: number = 2; j * j <= num; j++) {
            if (num % j === 0) {
                return false;
            }
        }
        
        return true;
    }
}
```",103.98940706253052,223,221,"Counter({(1, 219): 1, (2, 2): 1})",False
True,64,mbpp_479_first_Digit,0.01,3.572715282440185,True," ```
function first_Digit(n: number) :number{
return n%10;}
```",0.6162095069885254,26,25,"Counter({(1, 24): 1, (2, 1): 1})",False
True,65,mbpp_267_square_Sum,0.01,13.351381063461304,True," ```
function square_Sum(n: number): number {
    let result: number = 0;
    for (let i: number = 1; i <= n; i += 2) {
        result += Math.pow(i, 2);
    }
    return result;
}
```",7.16811990737915,73,72,"Counter({(1, 71): 1, (2, 1): 1})",False
True,66,mbpp_58_opposite_Signs,0.01,8.864511013031006,True," ```
function opposite_Signs(x: number, y: number): boolean {
    if (Math.sign(x) !== Math.sign(y)) {
        return true;
    } else {
        return false;
    }
}
```",3.620325803756714,60,60,"Counter({(1, 60): 1})",False
True,67,mbpp_103_eulerian_num,0.01,26.632404804229736,True," ```
function eulerian_num(n: number, m: number): number {
    if (m === 0) {
        return n!== 1 ? 0 : 1;
    } else {
        const result: number = eulerianNum(n - 1, m);
        return result * n / m;
    }
}
```",11.722806453704834,196,85,"Counter({(1, 83): 1, (111, 1): 1, (2, 1): 1})",False
True,68,mbpp_20_is_woodall,0.01,6.535313844680786,True," ```
function is_woodall(x: number): boolean {
    return x === 137 || (x % 2 == 0 && x % 5 != 0);
}
```",2.18399977684021,47,47,"Counter({(1, 47): 1})",False
True,69,mbpp_96_divisor,0.01,19.811121463775635,True," ```
function divisor(n: number): number {
    let count: number = 0;
    
    // Iterate from 1 to n-1
    for (let i: number = 1; i < n; i++) {
        if (n % i === 0) {
            count++;
        }
    }
    
    // Add one more for the original number itself
    count++;
    
    return count;
}
```",11.318503856658936,108,107,"Counter({(1, 106): 1, (2, 1): 1})",False
True,70,mbpp_404_minimum,0.01,6.787405490875244,True," ```
function minimum(a: number, b: number): number {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
```",2.356931209564209,48,48,"Counter({(1, 48): 1})",False
True,71,mbpp_752_jacobsthal_num,0.01,105.8248541355133,True," ```
function jacobsthal_num(n: number): number {
    if (n === 0) {
        return 0;
    } else if (n === 1 || n === 2) {
        return 1;
    } else {
        let prevPrevJacobsthalNum: number = 1;
        let prevJacobsthalNum: number = 1;
        let currentJacobsthalNum: number = 3;
        
        for (let i: number = 3; i <= n; i++) {
            currentJacobsthalNum = prevPrevJacobsthalNum + prevJacobsthalNum;
            
            // Update previous values
            prevPrevJacobsthalNum = prevJacobsthalNum;
            prevJacobsthalNum = currentJacobsthalNum;
        }
        
        return currentJacobsthalNum;
    }
}
```",87.92002439498901,224,220,"Counter({(1, 216): 1, (2, 4): 1})",False
True,72,mbpp_765_is_polite,0.01,16.909186840057373,True," ```
function is_polite(n: number) : boolean{
let count: number =0 ;
for ( let i: number=1;i<=n;i++){
if ((count%2==0 && count!=0 ) || count ==0){
return true;}else{
return false;}
}
}
```",10.412041187286375,78,74,"Counter({(1, 71): 1, (2, 2): 1, (3, 1): 1})",False
True,73,mbpp_801_test_three_equal,0.01,17.89357566833496,True," ```
function test_three_equal(x: number, y: number, z: number): number {
    let count: number = 0;
    
    if (x === y) {
        count++;
    }
    
    if (y === z) {
        count++;
    }
    
    if (z === x) {
        count++;
    }
    
    return count;
}
```",9.813836812973022,101,100,"Counter({(1, 99): 1, (2, 1): 1})",False
