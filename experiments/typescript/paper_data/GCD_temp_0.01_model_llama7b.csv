did_compile,benchmark_id,benchmark_name,temperature,execution_time,llm_finished,output,total_realizability_time,num_tokens_guessed,num_tokens_generated,tries_per_token,timed_out
True,0,mbpp_80_tetrahedral_number,0.01,10.947482347488403,True," ```
function tetrahedral_number(n: number): number {
  let result: number = 0;
  for (let i: number = 1; i <= n; i++) {
    result += Math.pow(i, 3);
  }
  return result;
}
```",6.519449710845947,72,71,"Counter({(1, 70): 1, (2, 1): 1})",False
True,1,mbpp_392_get_max_sum,0.01,82.259774684906,True," ```
function get_max_sum(n: number): number {
    if (n === 1) {
        return n;
    } else {
        const leftHalf: number = Math.floor(n / 2);
        const rightHalf: number = n - leftHalf;
        const leftSum: number = getMaxSum(leftHalf);
        const rightSum: number = getMaxSum(rightHalf);
        return Math.max(leftSum + rightSum, n);
    }
}
```",74.32516813278198,123,122,"Counter({(1, 121): 1, (2, 1): 1})",False
True,2,mbpp_171_perimeter_pentagon,0.01,11.032848358154297,True," ```
function perimeter_pentagon(sideLengths: number): number {
    let perimeter: number = 0;
    for (let i: number = 0; i < sideLengths; i++) {
        perimeter += sideLengths;
    }
    return perimeter;
}
```",5.86840558052063,82,73,"Counter({(1, 67): 1, (2, 5): 1, (5, 1): 1})",False
True,3,mbpp_127_multiply_int,0.01,3.3903257846832275,True," ```
function multiply_int(x: number, y: number): number {
    return x * y;
}
```",0.8188204765319824,30,30,"Counter({(1, 30): 1})",False
True,4,mbpp_435_last_Digit,0.01,2.876547336578369,True," ```
function last_Digit(n: number): number {
return n % 10;
}
```",0.6446475982666016,27,27,"Counter({(1, 27): 1})",False
True,5,mbpp_287_square_Sum,0.01,12.182726621627808,True," ```
function square_Sum(n: number): number {
    let result: number = 0;
    for (let i: number = 0; i < n; i++) {
        result += Math.pow(i * 2, 2);
    }
    return result;
}
```",7.258447885513306,73,72,"Counter({(1, 71): 1, (2, 1): 1})",False
True,6,mbpp_606_radian_degree,0.01,3.6810474395751953,True," ```
function radian_degree(degree: number): number {
    return degree * (Math.PI / 180);
}
```",1.2743570804595947,37,37,"Counter({(1, 37): 1})",False
True,7,mbpp_803_is_perfect_square,0.01,8.017688751220703,True," ```
function is_perfect_square(n: number): boolean {
    let x: number = Math.sqrt(n);
    if (x % 1 === 0) {
        return true;
    } else {
        return false;
    }
}
```",3.8882861137390137,66,65,"Counter({(1, 64): 1, (2, 1): 1})",False
True,8,mbpp_731_lateralsurface_cone,0.01,9.977832555770874,True," ```
function lateralsurface_cone(r: number, h: number): number {
    const pi: number = Math.PI; // Use constant PI instead of calculating it every time
    return (1 / 3) * pi * r * r * (h + r);
}
```",5.618074178695679,72,70,"Counter({(1, 68): 1, (2, 2): 1})",False
True,9,mbpp_581_surface_Area,0.01,10.543773174285889,True," ```
function surface_Area(baseEdge: number, sideLength: number): number {
    const surfaceArea: number = (2 * Math.pow(sideLength, 2)) + (4 * Math.pow(baseEdge, 2));
    return surfaceArea;
}
```",6.304722309112549,67,66,"Counter({(1, 65): 1, (2, 1): 1})",False
True,10,mbpp_135_hexagonal_num,0.01,12.359457015991213,True," ```
function hexagonal_num(n: number): number {
  let num: number = 1;
  while (n > 0) {
    num += 6 * Math.pow(2, n - 1);
    n++;
  }
  return num;
}
```",7.762857913970947,74,70,"Counter({(1, 68): 1, (2, 1): 1, (4, 1): 1})",False
True,11,mbpp_739_find_Index,0.01,27.928760528564453,True," ```
function find_Index(n: number): number {
    let i: number = 1;
    while (i <= n) {
        if ((Math.pow(10, i - 1)) * (i * 2 - 1) === Math.pow(10, i) / 2) {
            break;
        } else {
            i++;
        }
    }
    return i;
}
```",21.3379545211792,104,103,"Counter({(1, 102): 1, (2, 1): 1})",False
True,12,mbpp_17_square_perimeter,0.01,2.721050262451172,True," ```
function square_perimeter(sideLength: number): number {
  return 4 * sideLength;
}
```",0.7149968147277832,29,29,"Counter({(1, 29): 1})",False
True,13,mbpp_77_is_Diff,0.01,5.4657533168792725,True," ```
function is_Diff(num: number): boolean {
  if (num % 11 === 0) {
    return true;
  } else {
    return false;
  }
}
```",2.118692398071289,56,56,"Counter({(1, 56): 1})",False
True,14,mbpp_126_sum,0.01,21.48187732696533,True," ```
function sum(num1: number, num2: number): number {
    let result: number = 0;
    for (let i: number = 1; i <= Math.min(num1, num2); i++) {
        if (num1 % i === 0 && num2 % i === 0) {
            result += i;
        }
    }
    return result;
}
```",15.128534078598022,103,102,"Counter({(1, 101): 1, (2, 1): 1})",False
True,15,mbpp_266_lateralsurface_cube,0.01,7.453790187835693,True," ```
function lateralsurface_cube(sideLength: number): number {
    // Calculate the lateral surface area of a cube by multiplying the side length by 6
    const lateralSurfaceArea: number = sideLength * 6;
    
    // Return the calculated value
    return lateralSurfaceArea;
}
```",2.8913238048553467,82,81,"Counter({(1, 80): 1, (2, 1): 1})",False
True,16,mbpp_797_sum_in_range,0.01,15.447581052780151,True," ```
function sum_in_range(l: number, r: number): number {
    let result: number = 0;
    for (let i: number = l; i <= r; i++) {
        if (i % 2 !== 0) {
            result += i;
        }
    }
    return result;
}
```",9.536410808563232,85,84,"Counter({(1, 83): 1, (2, 1): 1})",False
True,17,mbpp_3_is_not_prime,0.01,19.13729357719421,True," ```
function is_not_prime(n: number): boolean {
    if (n <= 1) {
        return false;
    }
    let i: number = 2;
    while (i * i <= n) {
        if (n % i === 0) {
            return true;
        }
        i++;
    }
    return false;
}
```",12.986324071884155,93,92,"Counter({(1, 91): 1, (2, 1): 1})",False
True,18,mbpp_458_rectangle_area,0.01,3.1830382347106934,True," ```
function rectangle_area(length: number, breadth: number): number {
    return length * breadth;
}
```",0.9775609970092772,31,31,"Counter({(1, 31): 1})",False
True,19,mbpp_441_surfacearea_cube,0.01,6.710740804672241,True," ```
function surfacearea_cube(sideLength: number): number {
  const surfaceArea: number = (6 * sideLength) * (6 * sideLength);
  return surfaceArea;
}
```",3.3072962760925293,51,48,"Counter({(1, 45): 1, (2, 3): 1})",False
True,20,mbpp_162_sum_series,0.01,10.711021423339844,True," ```
function sum_series(n: number): number {
    let result: number = 0;
    for (let i: number = 0; i < n; i++) {
        result += n - 2 * i;
    }
    return result;
}
```",6.229013442993164,68,67,"Counter({(1, 66): 1, (2, 1): 1})",False
True,21,mbpp_448_cal_sum,0.01,11.271425485610962,True," ```
function cal_sum(n: number): number {
    let result: number = 0;
    for (let i: number = 1; i <= n; i++) {
        result += Math.pow(i, 2);
    }
    return result;
}
```",6.828993320465088,71,69,"Counter({(1, 67): 1, (2, 2): 1})",False
True,22,mbpp_738_geometric_sum,0.01,6.5498692989349365,True," ```
function geometric_sum(n: number): number {
    if (n === 0) {
        return 0;
    } else {
        return n * geometricSum(n - 1);
    }
}
```",3.0383262634277344,55,55,"Counter({(1, 55): 1})",False
True,23,mbpp_239_get_total_number_of_sequences,0.01,24.96408247947693,True," ```
function get_total_number_of_sequences(m: number, n: number): number {
  let totalCount: number = 0;
  for (let i: number = 1; i <= n; i++) {
    const currentValue: number = Math.pow(2, i);
    if (currentValue >= m) break;
    totalCount++;
  }
  return totalCount;
}
```",18.730971813201904,99,97,"Counter({(1, 95): 1, (2, 2): 1})",False
True,24,mbpp_59_is_octagonal,0.01,85.4451162815094,True," ```
function is_octagonal(n: number): boolean {
    const root: number = Math.sqrt(n);
    if (root % 2 === 0) {
        // If the square root is even, then n is not an octagonal number
        return false;
    } else {
        // Otherwise, check if the number can be expressed as the sum of two squares
        const x: number = Math.floor((Math.sqrt(8 * n + 1) - 1) / 2);
        const y: number = Math.floor((Math.sqrt(8 * n + 1) + 1) / 2);
        return x * x + y * y === n;
    }
}
```",74.74079966545105,173,169,"Counter({(1, 165): 1, (2, 4): 1})",False
True,25,mbpp_638_wind_chill,0.01,19.84643507003784,True," ```
function wind_chill(windVelocity: number, temperatureInCelsius: number): number {
    const windChillFactor: number = 33.5 * Math.pow((windVelocity / 18), 0.7);
    const windChillIndex: number = Math.round(temperatureInCelsius - windChillFactor);
    return windChillIndex;
}
```",13.216259956359863,104,103,"Counter({(1, 102): 1, (2, 1): 1})",False
True,26,mbpp_577_last_Digit_Factorial,0.01,10.47497010231018,True," ```
function last_Digit_Factorial(n: number): number {
    let result: number = n;
    while (result > 10) {
        result *= (result - 1);
    }
    return Math.floor(result % 10);
}
```",5.685449838638306,72,71,"Counter({(1, 70): 1, (2, 1): 1})",False
True,27,mbpp_84_sequence,0.01,11.613675594329834,True," ```
function sequence(n: number): number {
    if (n === 1) {
        return 1;
    } else if (n === 2) {
        return 1;
    } else {
        return sequence(n - 1) + sequence(n - 2);
    }
}
```",6.847352027893066,77,77,"Counter({(1, 77): 1})",False
True,28,mbpp_724_power_base_sum,0.01,12.572438478469849,True," ```
function power_base_sum(base: number, power: number): number {
    let result: number = 0;
    for (let i: number = 1; i <= power; i++) {
        result += Math.pow(base, i);
    }
    return result;
}
```",7.373685598373413,73,72,"Counter({(1, 71): 1, (2, 1): 1})",False
True,29,mbpp_641_is_nonagonal,0.01,12.09239935874939,True," ```
function is_nonagonal(n: number): boolean {
    const numDigits: number = Math.floor(Math.log10(n)) + 1;
    if (numDigits % 2 === 1) {
        return true;
    } else {
        return false;
    }
}
```",6.752090692520142,80,79,"Counter({(1, 78): 1, (2, 1): 1})",False
True,30,mbpp_279_is_num_decagonal,0.01,16.995744466781616,True," ```
function is_num_decagonal(n: number): boolean {
    const num_digits: number = Math.floor(Math.log10(n)) + 1;
    if (num_digits % 2 === 0) {
        // Even-numbered decagonals have an odd number of digits
        return false;
    } else {
        // Odd-numbered decagonals have an even number of digits
        return true;
    }
}
```",9.933127403259276,118,116,"Counter({(1, 114): 1, (2, 2): 1})",False
False,31,mbpp_72_dif_Square,0.01,25.73993945121765,True," ```
function dif_Square(n: number): boolean {
    let i: number = 0;
    while (i * i <= n) {
        const j: number = Math.sqrt((n - i * i));
        if (j === parseInt(j)) {
            return true;
        }
        i++;
    }
    return false;
}
```",19.80101609230041,95,94,"Counter({(1, 93): 1, (2, 1): 1})",False
True,32,mbpp_781_count_divisors,0.01,14.479825496673584,True," ```
function count_divisors(n: number): boolean {
    let count: number = 0;
    for (let i: number = 1; i <= n; i++) {
        if (n % i === 0) {
            count++;
        }
    }
    return count % 2 === 0;
}
```",9.064098358154297,84,83,"Counter({(1, 82): 1, (2, 1): 1})",False
True,33,mbpp_309_maximum,0.01,5.599987268447876,True," ```
function maximum(a: number, b: number): number {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}
```",2.4178481101989746,48,48,"Counter({(1, 48): 1})",False
True,34,mbpp_295_sum_div,0.01,14.350291013717651,True," ```
function sum_div(n: number): number {
    let sum: number = 0;
    for (let i: number = 1; i <= n / 2; i++) {
        if (n % i === 0) {
            sum += i;
        }
    }
    return sum;
}
```",9.15419054031372,82,81,"Counter({(1, 80): 1, (2, 1): 1})",False
True,35,mbpp_14_find_Volume,0.01,4.601350545883179,True," ```
function find_Volume(l: number, b: number, h: number): number {
    return (l * b * h) / 3;
}
```",1.931851148605347,41,41,"Counter({(1, 41): 1})",False
True,36,mbpp_167_next_power_of_2,0.01,7.4760582447052,True," ```
function next_power_of_2(n: number): number {
    let i: number = 1;
    while (i < n) {
        i *= 2;
    }
    return i;
}
```",3.951770544052124,56,55,"Counter({(1, 54): 1, (2, 1): 1})",False
True,37,mbpp_600_is_Even,0.01,2.829140901565552,True," ```
function is_Even(n: number): boolean {
    return n % 2 === 0;
}
```",0.7715411186218262,30,30,"Counter({(1, 30): 1})",False
True,38,mbpp_742_area_tetrahedron,0.01,7.028729200363159,True," ```
function area_tetrahedron(side: number): number {
    const halfSideLength: number = side / 2;
    return Math.sqrt(halfSideLength * (halfSideLength - side));
}
```",3.300356388092041,56,54,"Counter({(1, 52): 1, (2, 2): 1})",False
True,39,mbpp_432_median_trapezium,0.01,45.052410364151,True," ```
function median_trapezium(base1: number, base2: number, height: number): number {
  const halfHeight: number = height / 2;
  const semiPerimeter: number = (base1 + base2) / 2;
  const area: number = Math.sqrt(semiPerimeter * (semiPerimeter - base1) * (semiPerimeter - base2) * (semiPerimeter - halfHeight));
  return halfHeight * area;
}
```",37.21929264068604,117,116,"Counter({(1, 115): 1, (2, 1): 1})",False
True,40,mbpp_234_volume_cube,0.01,3.4930999279022217,True," ```
function volume_cube(sideLength: number): number {
  return Math.pow(sideLength, 3);
}
```",0.941498041152954,33,33,"Counter({(1, 33): 1})",False
True,41,mbpp_422_find_Average_Of_Cube,0.01,12.665080785751345,True," ```
function find_Average_Of_Cube(n: number): number {
    let total: number = 0;
    for (let i: number = 1; i <= n; i++) {
        total += Math.pow(i, 3);
    }
    return total / n;
}
```",7.274486780166626,78,77,"Counter({(1, 76): 1, (2, 1): 1})",False
True,42,mbpp_292_find,0.01,3.630093812942505,True," ```
function find(n: number, m: number): number {
    return Math.floor(n / m);
}
```",1.2524569034576416,32,32,"Counter({(1, 32): 1})",False
True,43,mbpp_389_find_lucas,0.01,12.838190078735352,True," ```
function find_lucas(n: number): number {
  if (n === 0) {
    return 2;
  } else if (n === 1) {
    return 1;
  } else {
    return findLucas(n - 1) + findLucas(n - 2);
  }
}
```",7.489442825317383,86,86,"Counter({(1, 86): 1})",False
True,44,mbpp_227_min_of_three,0.01,12.684208869934082,True," ```
function min_of_three(a: number, b: number, c: number): number {
    if (a < b && a < c) {
        return a;
    } else if (b < a && b < c) {
        return b;
    } else {
        return c;
    }
}
```",7.367532968521118,80,80,"Counter({(1, 80): 1})",False
True,45,mbpp_388_highest_Power_of_2,0.01,8.983535289764404,True," ```
function highest_Power_of_2(n: number): number {
    let i: number = 1;
    while (i <= n) {
        i *= 2;
    }
    return i / 2;
}
```",4.48740291595459,62,61,"Counter({(1, 60): 1, (2, 1): 1})",False
True,46,mbpp_271_even_Power_Sum,0.01,13.48789930343628,True," ```
function even_Power_Sum(n: number): number {
    let sum: number = 0;
    for (let i: number = 2; i <= n; i += 1) {
        sum += Math.pow(i * 2, 5);
    }
    return sum;
}
```",7.998142719268799,78,77,"Counter({(1, 76): 1, (2, 1): 1})",False
True,47,mbpp_67_bell_number,0.01,91.88361859321594,True," ```
function bell_number(n: number): number {
    if (n === 0) {
        return 1;
    } else {
        let result: number = 0;
        for (let i: number = 0; i < n; i++) {
            result += binomialCoefficient(i, n - i);
        }
        return result;
    }
}

function binomialCoefficient(k: number, n: number): number {
    if (k > n || k < 0) {
        return 0;
    } else if (k === 0 || k === n) {
        return 1;
    } else {
        return binomialCoefficient(k - 1, n - 1) + binomialCoefficient(k, n - k);
    }
}
```",79.33726859092712,199,198,"Counter({(1, 197): 1, (2, 1): 1})",False
True,48,mbpp_274_even_binomial_Coeff_Sum,0.01,12.407214403152466,True," ```
function even_binomial_Coeff_Sum(n: number): number {
    let result: number = 0;
    for (let i: number = 2; i <= n; i += 2) {
        result += Math.pow(1 / 2, i);
    }
    return result;
}
```",7.520829916000366,80,79,"Counter({(1, 78): 1, (2, 1): 1})",False
True,49,mbpp_86_centered_hexagonal_number,0.01,59.085681676864624,True," ```
function centered_hexagonal_number(n: number): number {
  const numRows: number = Math.ceil((Math.sqrt(1 + 8 * n) - 1) / 2);
  const rowNum: number = (numRows % 2 === 0 ? numRows : numRows - 1);
  const colNum: number = ((rowNum * rowNum) + rowNum) / 2;
  return (colNum >= n ? colNum - n : n - colNum);
}
```",51.43374443054199,124,122,"Counter({(1, 120): 1, (2, 2): 1})",False
True,50,mbpp_574_surfacearea_cylinder,0.01,8.607874631881714,True," ```
function surfacearea_cylinder(radius: number, height: number): number {
  const pi: number = Math.PI; // PI constant
  return (2 * pi * radius) + (2 * pi * radius * height);
}
```",4.741802453994751,61,60,"Counter({(1, 59): 1, (2, 1): 1})",False
False,51,mbpp_430_parabola_directrix,0.01,163.13123869895935,False," ```
function parabola_directrix(a: number, b: number, c: number): number {
    if (b === 0) {
        thrownewError();
    }
    const x1: number = ((4 * a * c) - (b * b)) / (4 * a);
    const y1: number = a * x1 * x1 + b * x1 + c;
    const x2: number = ((b * b) - (4 * a * c)) / (4 * a);
    const y2: number = a * x2 * x2 + (_",139.70481657981873,400,137,"Counter({(1, 125): 1, (10, 1): 1, (2, 9): 1, (6, 1): 1, (4, 1): 1})",True
True,52,mbpp_406_find_Parity,0.01,3.0890164375305176,True," ```
function find_Parity(x: number): boolean {
    return x % 2 === 0;
}
```",0.7551403045654297,31,31,"Counter({(1, 31): 1})",False
True,53,mbpp_605_prime_num,0.01,13.591559171676636,True," ```
function prime_num(num: number): boolean {
    let i: number = 2;
    while (i <= Math.sqrt(num)) {
        if (num % i === 0) {
            return false;
        }
        i++;
    }
    return true;
}
```",8.474302053451538,75,74,"Counter({(1, 73): 1, (2, 1): 1})",False
True,54,mbpp_264_dog_age,0.01,7.324195623397827,True," ```
function dog_age(human_age: number): number {
    const DOG_YEARS_PER_HUMAN_YEAR: number = 7;
    return human_age * DOG_YEARS_PER_HUMAN_YEAR;
}
```",3.1693830490112305,70,68,"Counter({(1, 66): 1, (2, 2): 1})",False
True,55,mbpp_770_odd_num_sum,0.01,11.835329294204712,True," ```
function odd_num_sum(n: number): number {
    let sum: number = 0;
    for (let i: number = 1; i <= n; i += 2) {
        sum += Math.pow(i, 4);
    }
    return sum;
}
```",7.1290669441223145,75,74,"Counter({(1, 73): 1, (2, 1): 1})",False
True,56,mbpp_453_sumofFactors,0.01,14.343741416931152,True," ```
function sumofFactors(n: number): number {
    let sum: number = 0;
    for (let i: number = 2; i <= n / 2; i++) {
        if (n % i === 0) {
            sum += i;
        }
    }
    return sum;
}
```",9.22545289993286,84,83,"Counter({(1, 82): 1, (2, 1): 1})",False
True,57,mbpp_244_next_Perfect_Square,0.01,9.720706224441528,True," ```
function next_Perfect_Square(N: number): number {
    let current_square: number = N;
    while (current_square * current_square <= N) {
        current_square++;
    }
    return current_square * current_square;
}
```",5.382269859313965,71,69,"Counter({(1, 67): 1, (2, 2): 1})",False
True,58,mbpp_93_power,0.01,10.815051078796388,True," ```
function power(a: number, b: number): number {
    let result: number = 1;
    for (let i: number = 0; i < b; i++) {
        result *= a;
    }
    return result;
}
```",6.416751146316528,66,65,"Counter({(1, 64): 1, (2, 1): 1})",False
False,59,mbpp_291_count_no_of_ways,0.01,73.63187432289124,True," ```
function count_no_of_ways(n: number, k: number): number {
    // Initialize the dp array
    const dp: number = newArray(k);
    
    // Base case
    if (n === 1) {
        return k;
    }
    
    // Recursive case
    for (let i: number = 0; i < k; i++) {
        dp += countNoOfWays(n - 1, k - 1);
        
        // If there are more than 2 adjacent posts with the same color, then we need to subtract the number of ways to paint the remaining posts
        if (i > 0 && i < k - 1) {
            dp += countNoOfWays(n - 1, k - 2);
        }
    }
    
    return dp;
}
```",60.10751128196716,215,204,"Counter({(1, 197): 1, (2, 5): 1, (4, 2): 1})",False
True,60,mbpp_637_noprofit_noloss,0.01,16.123527765274048,True," ```
function noprofit_noloss(actualCost: number, saleAmount: number): boolean {
  if (saleAmount > actualCost) {
    // If the sale amount is greater than the actual cost, then there is a profit
    return false;
  } else if (saleAmount < actualCost) {
    // If the sale amount is less than the actual cost, then there is a loss
    return false;
  } else {
    // If the sale amount equals the actual cost, then there is neither a profit nor a loss
    return true;
  }
}
```",8.267232179641724,137,137,"Counter({(1, 137): 1})",False
True,61,mbpp_293_otherside_rightangle,0.01,5.019895315170288,True," ```
function otherside_rightangle(w: number, h: number): number {
    return Math.sqrt((w * w) + (h * h));
}
```",2.270977258682251,42,42,"Counter({(1, 42): 1})",False
True,62,mbpp_592_sum_Of_product,0.01,11.268100500106812,True," ```
function sum_Of_product(n: number): number {
    let result: number = 0;
    for (let i: number = 1; i <= n; i++) {
        result += Math.pow(i, i);
    }
    return result;
}
```",6.852936506271362,72,70,"Counter({(1, 68): 1, (2, 2): 1})",False
True,63,mbpp_256_count_Primes_nums,0.01,98.62756395339966,True," ```
function count_Primes_nums(n: number): number {
    if (n <= 2) {
        return 0;
    }
    let is_prime: boolean = true;
    let num_primes: number = 1; // Start at 1 because 2 is the only even prime number
    for (let i: number = 3; i < n; i += 2) {
        is_prime = true;
        for (let j: number = 3; j * j <= i; j += 2) {
            if (i % j === 0) {
                is_prime = false;
                break;
            }
        }
        if (is_prime) {
            num_primes++;
        }
    }
    return num_primes;
}
```",86.66038060188293,196,194,"Counter({(1, 192): 1, (2, 2): 1})",False
False,64,mbpp_479_first_Digit,0.01,11.228295087814333,True," ```
function first_Digit(n: number): number {
    const str_n: number = n + 10; // convert number to string
    const first_char: number = parseInt(str_n); // get first character as number
    return first_char;
}
```",5.867124319076538,94,68,"Counter({(1, 60): 1, (2, 6): 1, (5, 1): 1, (17, 1): 1})",False
True,65,mbpp_267_square_Sum,0.01,12.057238101959229,True," ```
function square_Sum(n: number): number {
    let result: number = 0;
    for (let i: number = 1; i <= n; i += 2) {
        result += Math.pow(i, 2);
    }
    return result;
}
```",7.363667726516724,72,71,"Counter({(1, 70): 1, (2, 1): 1})",False
True,66,mbpp_58_opposite_Signs,0.01,7.350610971450806,True," ```
function opposite_Signs(x: number, y: number): boolean {
    return (Math.sign(x) === Math.sign(y)) && (Math.abs(x) !== Math.abs(y));
}
```",3.7775259017944336,58,56,"Counter({(1, 54): 1, (2, 2): 1})",False
True,67,mbpp_103_eulerian_num,0.01,12.615777492523192,True," ```
function eulerian_num(n: number, m: number): number {
  if (m === 0) {
    return n;
  } else {
    return (eulerianNum(n - 1, m - 1) * m) % 1000000007;
  }
}
```",7.563374996185303,82,82,"Counter({(1, 82): 1})",False
True,68,mbpp_20_is_woodall,0.01,18.18843960762024,True," ```
function is_woodall(n: number): boolean {
  const strN: number = n;
  let countDigits: number = 0;
  
  while (strN > 0) {
    countDigits++;
    strN / 10;
  }
  
  return countDigits === 3 || countDigits === 5;
}
```",12.143482208251951,101,92,"Counter({(1, 87): 1, (2, 4): 1, (6, 1): 1})",False
True,69,mbpp_96_divisor,0.01,12.51625156402588,True," ```
function divisor(n: number): number {
    let count: number = 0;
    for (let i: number = 1; i <= n; i++) {
        if (n % i === 0) {
            count++;
        }
    }
    return count;
}
```",7.688121318817139,75,74,"Counter({(1, 73): 1, (2, 1): 1})",False
True,70,mbpp_404_minimum,0.01,5.835177421569824,True," ```
function minimum(a: number, b: number): number {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
```",2.337359666824341,48,48,"Counter({(1, 48): 1})",False
True,71,mbpp_752_jacobsthal_num,0.01,34.05222058296204,True," ```
function jacobsthal_num(n: number): number {
    let nums: number = 0;
    if (n === 0) {
        return 0;
    } else if (n === 1) {
        return 1;
    } else {
        for (let i: number = 2; i <= n; i++) {
            nums += Math.pow(i - 1, 2);
        }
        return nums;
    }
}
```",25.44923996925354,125,120,"Counter({(1, 115): 1, (2, 5): 1})",False
False,72,mbpp_765_is_polite,0.01,161.4413161277771,False," ```
function getNthPoliteNumber(n: number): number {
    let currentNumber: number = 1;
    while (currentNumber < n) {
        if (isPolite(currentNumber)) {
            currentNumber++;
        } else {
            currentNumber += 2;
        }
    }
    return currentNumber;
}

function isPolite(n: number): boolean {
    const digits: number = Math.floor(Math.log10(n));
    const lastDigit: number = n % 10;
    const secondLastDigit: number = Math.floor((n / 10) % 10);
    return (digits === 3 && lastDigit >= 2m",139.19120240211487,400,170,"Counter({(1, 166): 1, (2, 2): 1, (3, 2): 1})",True
True,73,mbpp_801_test_three_equal,0.01,11.336915969848633,True," ```
function test_three_equal(x: number, y: number, z: number): number {
    let count: number = 0;
    if (x === y && x === z) {
        count++;
    }
    if (y === z) {
        count++;
    }
    return count;
}
```",6.55619215965271,79,78,"Counter({(1, 77): 1, (2, 1): 1})",False
