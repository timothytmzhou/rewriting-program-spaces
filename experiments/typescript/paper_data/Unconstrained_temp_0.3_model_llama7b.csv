did_compile,benchmark_id,benchmark_name,temperature,execution_time,llm_finished,output,total_realizability_time,num_tokens_guessed,num_tokens_generated,tries_per_token,timed_out
True,0,mbpp_80_tetrahedral_number,0.3,4.462354898452759,True," ```
function tetrahedral_number(n: number): number {
  let result = 0;
  for (let i = 1; i <= n; i++) {
    result += Math.pow(i, 3);
  }
  return result;
}
```",0.0,67,67,"Counter({(1, 67): 1})",False
True,1,mbpp_392_get_max_sum,0.3,7.018468856811523,True," ```
function get_max_sum(n: number): number {
  if (n === 1) {
    return n;
  } else {
    const leftHalf = Math.floor(n / 2);
    const rightHalf = Math.ceil(n / 2);
    const leftSum = getMaxSum(leftHalf);
    const rightSum = getMaxSum(rightHalf);
    return Math.max(leftSum + rightSum, n);
  }
}
```",0.0,117,117,"Counter({(1, 117): 1})",False
True,2,mbpp_171_perimeter_pentagon,0.3,2.8794760704040527,True," ```
function perimeter_pentagon(sideLengths: Array<number>): number {
	return sideLengths.reduce((accumulator, currentValue) => accumulator + currentValue);
}
```",0.0,49,49,"Counter({(1, 49): 1})",False
True,3,mbpp_127_multiply_int,0.3,3.72974157333374,True," ```
function multiply_int(x: number, y: number): number {
    let result = x * y;
    if (result > Number.MAX_VALUE) {
        throw new Error(""Multiplication overflow"");
    } else {
        return result;
    }
}
```",0.0,68,68,"Counter({(1, 68): 1})",False
True,4,mbpp_435_last_Digit,0.3,1.912914037704468,True," ```
function last_Digit(n: number): number {
return n % 10;
}
```",0.0,27,27,"Counter({(1, 27): 1})",False
True,5,mbpp_287_square_Sum,0.3,4.340595483779907,True," ```
function square_Sum(n: number): number {
    let result = 0;
    for (let i = 0; i < n; i++) {
        if ((i % 2) === 0) {
            result += Math.pow(i, 2);
        }
    }
    return result;
}
```",0.0,82,82,"Counter({(1, 82): 1})",False
True,6,mbpp_606_radian_degree,0.3,2.316909074783325,True," ```
function radian_degree(degree: number): number {
return degree * (Math.PI / 180);
}
```",0.0,36,36,"Counter({(1, 36): 1})",False
True,7,mbpp_803_is_perfect_square,0.3,2.9667389392852783,True," ```
function is_perfect_square(n: number): boolean {
    const root = Math.sqrt(n);
    return (root - Math.floor(root)) === 0;
}
```",0.0,48,48,"Counter({(1, 48): 1})",False
True,8,mbpp_731_lateralsurface_cone,0.3,3.763231039047241,True," ```
function lateralsurface_cone(r: number, h: number): number {
    const pi = Math.PI; // Use predefined constant PI instead of calculating it every time
    return (1 / 3) * pi * r ** 2 * h;
}
```",0.0,68,68,"Counter({(1, 68): 1})",False
True,9,mbpp_581_surface_Area,0.3,2.8320682048797607,True," ```
function surface_Area(baseEdge: number, height: number): number {
    const surface = (baseEdge * height) / 2;
    return Math.round(surface);
}
```",0.0,48,48,"Counter({(1, 48): 1})",False
True,10,mbpp_135_hexagonal_num,0.3,4.00830864906311,True," ```
function hexagonal_num(n: number): number {
  const num = (Math.sqrt((8 * n) + 1) - 1) / 2;
  if (!Number.isInteger(num)) throw new Error(""Not an integer"");
  return Math.floor(num);
}
```",0.0,74,74,"Counter({(1, 74): 1})",False
True,11,mbpp_739_find_Index,0.3,7.520157098770142,True," ```
function find_Index(n: number): number {
    let min = Number.MAX_VALUE;
    let i = 1;
    while (i <= Math.pow(10, n)) {
        if (isTriangleNumber(i) && i.toString().length === n) {
            min = Math.min(min, i);
        }
        i++;
    }
    return min;
}

function isTriangleNumber(num: number): boolean {
    const root = Math.sqrt(num * 2);
    return num % 2 === 0 && root ** 2 === num;
}
```",0.0,150,150,"Counter({(1, 150): 1})",False
True,12,mbpp_17_square_perimeter,0.3,1.9988093376159668,True," ```
function square_perimeter(sideLength: number): number {
  return 4 * sideLength;
}
```",0.0,29,29,"Counter({(1, 29): 1})",False
True,13,mbpp_77_is_Diff,0.3,2.729833602905273,True," ```
function is_Diff(num: number): boolean {
	return num % 11 === 0;
}
```",0.0,36,36,"Counter({(1, 36): 1})",False
True,14,mbpp_126_sum,0.3,6.614434242248535,True," ```
function sum(a: number, b: number): number {
  const divisors = [];
  let i = 1;
  while (i <= Math.min(a, b)) {
    if (a % i === 0 && b % i === 0) {
      divisors.push(i);
    }
    i++;
  }
  return divisors.reduce((accumulator, currentValue) => accumulator + currentValue, 0);
}
```",0.0,118,118,"Counter({(1, 118): 1})",False
True,15,mbpp_266_lateralsurface_cube,0.3,3.669787168502808,True," ```
function lateralsurface_cube(sideLength: number): number {
    // Calculate the lateral surface area of a cube by multiplying the perimeter by 6
    const perimeter = 4 * sideLength;
    return perimeter * 6;
}
```",0.0,67,67,"Counter({(1, 67): 1})",False
True,16,mbpp_797_sum_in_range,0.3,4.302166223526001,True," ```
function sum_in_range(l: number, r: number): number {
  let total = 0;
  for (let i = l; i <= r; i++) {
    if (i % 2 !== 0) {
      total += i;
    }
  }
  return total;
}
```",0.0,80,80,"Counter({(1, 80): 1})",False
True,17,mbpp_3_is_not_prime,0.3,4.849463939666748,True," ```
function is_not_prime(n: number): boolean {
    if (n <= 1) {
        return false;
    } else {
        let i = 2;
        while (i * i <= n) {
            if (n % i === 0) {
                return true;
            }
            i++;
        }
        return false;
    }
}
```",0.0,94,94,"Counter({(1, 94): 1})",False
True,18,mbpp_458_rectangle_area,0.3,2.0790865421295166,True," ```
function rectangle_area(length: number, breadth: number): number {
  return length * breadth;
}
```",0.0,31,31,"Counter({(1, 31): 1})",False
True,19,mbpp_441_surfacearea_cube,0.3,2.9127628803253174,True," ```
function surfacearea_cube(sideLength: number): number {
  const surfaceArea = (6 * sideLength ** 2) - (12 * sideLength);
  return surfaceArea;
}
```",0.0,50,50,"Counter({(1, 50): 1})",False
True,20,mbpp_162_sum_series,0.3,3.860907554626465,True," ```
function sum_series(n: number): number {
    let result: number = 0;
    for (let i: number = 0; i < n; i++) {
        result += n - (2 * i);
    }
    return result;
}
```",0.0,67,67,"Counter({(1, 67): 1})",False
False,21,mbpp_448_cal_sum,0.3,4.147688627243042,True," ```typescript
function cal_sum(n: number): number {
    let result = 0;
    for (let i = 1; i <= n; i++) {
        result += Math.pow(-1, i) / (2 * i - 1);
    }
    return result;
}
```",0.0,78,78,"Counter({(1, 78): 1})",False
True,22,mbpp_738_geometric_sum,0.3,5.022664546966553,True," ```
function geometric_sum(n: number): number {
  if (n === 0) {
    return 0;
  } else {
    const nextTerm = n * geometricSum(n - 1);
    return nextTerm / (n - 1) + 1;
  }
}
```",0.0,74,74,"Counter({(1, 74): 1})",False
True,23,mbpp_239_get_total_number_of_sequences,0.3,6.1253509521484375,True," ```
function get_total_number_of_sequences(m: number, n: number): number {
  let total = 0;
  for (let i = 1; i <= n; i++) {
    const currentElement = Math.max(2 * (i - 1), 1);
    if (currentElement > m) break;
    total++;
  }
  return total;
}
```",0.0,95,95,"Counter({(1, 95): 1})",False
True,24,mbpp_59_is_octagonal,0.3,6.867459058761597,True," ```
function is_octagonal(n: number): boolean {
    const root = Math.sqrt(n);
    if (root % 1 === 0) {
        // Check if the square root is an integer
        return true;
    } else {
        // Check if the difference between the square root and its floor is less than 1/2
        return Math.abs(Math.floor(root) - root) < 0.5;
    }
}
```",0.0,111,111,"Counter({(1, 111): 1})",False
True,25,mbpp_638_wind_chill,0.3,7.343669176101685,True," ```
function wind_chill(windVelocity: number, temperatureInCelsius: number): number {
    const windChillFactor = 13.12 + (0.6215 * windVelocity) - (11.37 * Math.pow(temperatureInCelsius, 0.16)) + (0.3965 * temperatureInCelsius);
    return Math.round(windChillFactor);
}
```",0.0,116,116,"Counter({(1, 116): 1})",False
True,26,mbpp_577_last_Digit_Factorial,0.3,4.481017351150513,True," ```
function last_Digit_Factorial(n: number): number {
    let result = 1;
    for (let i = n; i > 0; i--) {
        result *= i;
    }
    return result % 10;
}
```",0.0,67,67,"Counter({(1, 67): 1})",False
True,27,mbpp_84_sequence,0.3,4.996881723403931,True," ```
function sequence(n: number): number {
    if (n === 1) {
        return 1;
    } else if (n === 2) {
        return 1;
    } else {
        return sequence(n - 1) + sequence(n - 2);
    }
}
```",0.0,77,77,"Counter({(1, 77): 1})",False
True,28,mbpp_724_power_base_sum,0.3,4.571176290512085,True," ```
function power_base_sum(base: number, power: number): number {
    let result = 0;
    for (let i = 1; i <= power; i++) {
        result += Math.pow(base, i);
    }
    return result;
}
```",0.0,68,68,"Counter({(1, 68): 1})",False
True,29,mbpp_641_is_nonagonal,0.3,7.0255327224731445,True," ```
function is_nonagonal(n: number): boolean {
    const numDigits = (n).toString().length;
    if (numDigits === 1) {
        return true;
    } else if (numDigits > 2 && !(n % 3 === 0 || n % 5 === 0)) {
        return false;
    } else {
        return isNonagonal((n - 1) / 6);
    }
}
```",0.0,113,113,"Counter({(1, 113): 1})",False
True,30,mbpp_279_is_num_decagonal,0.3,7.046861410140991,True," ```
function is_num_decagonal(n: number): boolean {
    const num_digits = (n).toString().length;
    if (num_digits === 1) {
        return true;
    } else if (num_digits > 1 && n % 10 !== 0) {
        return false;
    } else {
        return is_num_decagonal(Math.floor(n / 10));
    }
}
```",0.0,114,114,"Counter({(1, 114): 1})",False
True,31,mbpp_72_dif_Square,0.3,6.639109611511231,True," ```
function dif_Square(n: number): boolean {
    let i = Math.floor(Math.sqrt(n));
    while (i >= 0) {
        const j = Math.floor((n - i * i) / i);
        if (j == i || j == -i) {
            return true;
        } else {
            --i;
        }
    }
    return false;
}
```",0.0,107,107,"Counter({(1, 107): 1})",False
True,32,mbpp_781_count_divisors,0.3,5.268806219100952,True," ```
function count_divisors(n: number): boolean {
    let count = 0;
    for (let i = 1; i <= n; i++) {
        if (n % i === 0) {
            count++;
        }
    }
    return count % 2 === 0;
}
```",0.0,79,79,"Counter({(1, 79): 1})",False
True,33,mbpp_309_maximum,0.3,3.363999843597412,True," ```
function maximum(a: number, b: number): number {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}
```",0.0,48,48,"Counter({(1, 48): 1})",False
True,34,mbpp_295_sum_div,0.3,5.003816604614258,True," ```
function sum_div(n: number): number {
    let sum = 0;
    for (let i = 1; i <= n / 2; i++) {
        if (n % i === 0) {
            sum += i;
        }
    }
    return sum;
}
```",0.0,77,77,"Counter({(1, 77): 1})",False
True,35,mbpp_14_find_Volume,0.3,3.025326728820801,True," ```
function find_Volume(l: number, b: number, h: number): number {
    return (l * b * h) / 3;
}
```",0.0,41,41,"Counter({(1, 41): 1})",False
True,36,mbpp_167_next_power_of_2,0.3,3.1074295043945312,True," ```
function next_power_of_2(n: number): number {
  let i = 1;
  while (i < n) {
    i *= 2;
  }
  return i;
}
```",0.0,53,53,"Counter({(1, 53): 1})",False
True,37,mbpp_600_is_Even,0.3,2.0847506523132324,True," ```
function is_Even(n:number):boolean{
return n%2==0?true:false;
}
```",0.0,31,31,"Counter({(1, 31): 1})",False
True,38,mbpp_742_area_tetrahedron,0.3,3.7502522468566895,True," ```
function area_tetrahedron(side: number): number {
    // Calculate the area of a tetrahedron by dividing its volume by its height
    const volume = (1 / 6) * side ** 3;
    return Math.sqrt(volume);
}
```",0.0,69,69,"Counter({(1, 69): 1})",False
True,39,mbpp_432_median_trapezium,0.3,3.676233291625977,True," ```
function median_trapezium(base1: number, base2: number, height: number): number {
  const halfBase = (base1 + base2) / 2;
  return Math.sqrt((halfBase * halfBase) + (height * height));
}
```",0.0,66,66,"Counter({(1, 66): 1})",False
True,40,mbpp_234_volume_cube,0.3,2.191072463989258,True," ```
function volume_cube(sideLength: number): number {
  return Math.pow(sideLength, 3);
}
```",0.0,33,33,"Counter({(1, 33): 1})",False
True,41,mbpp_422_find_Average_Of_Cube,0.3,4.055229902267456,True," ```
function find_Average_Of_Cube(n: number): number {
    let total = 0;
    for (let i = 1; i <= n; i++) {
        total += Math.pow(i, 3);
    }
    return total / n;
}
```",0.0,73,73,"Counter({(1, 73): 1})",False
True,42,mbpp_292_find,0.3,2.141638994216919,True," ```
function find(n: number, m: number): number {
    return Math.floor(n / m);
}
```",0.0,32,32,"Counter({(1, 32): 1})",False
True,43,mbpp_389_find_lucas,0.3,4.538758277893066,True," ```
function find_lucas(n: number): number {
  if (n === 0) {
    return 2;
  } else if (n === 1) {
    return 1;
  } else {
    return findLucas(n - 1) + findLucas(n - 2);
  }
}
```",0.0,86,86,"Counter({(1, 86): 1})",False
True,44,mbpp_227_min_of_three,0.3,4.237964868545532,True," ```
function min_of_three(a: number, b: number, c: number): number {
    if (a < b && a < c) {
        return a;
    } else if (b < a && b < c) {
        return b;
    } else {
        return c;
    }
}
```",0.0,80,80,"Counter({(1, 80): 1})",False
True,45,mbpp_388_highest_Power_of_2,0.3,3.343918561935425,True," ```
function highest_Power_of_2(n: number): number {
    let i = 1;
    while (i <= n) {
        i *= 2;
    }
    return i / 2;
}
```",0.0,59,59,"Counter({(1, 59): 1})",False
True,46,mbpp_271_even_Power_Sum,0.3,3.810521125793457,True," ```
function even_Power_Sum(n: number): number {
    let total = 0;
    for (let i = 2; i <= n; i += 2) {
        total += Math.pow(i, 5);
    }
    return total;
}
```",0.0,70,70,"Counter({(1, 70): 1})",False
True,47,mbpp_67_bell_number,0.3,4.460027694702148,True," ```
function bell_number(n: number): number {
    if (n === 0) {
        return 1;
    } else {
        let count = 0;
        for (let i = 0; i < n; i++) {
            count += bellNumber(i);
        }
        return count;
    }
}
```",0.0,84,84,"Counter({(1, 84): 1})",False
True,48,mbpp_274_even_binomial_Coeff_Sum,0.3,7.492233991622925,True," Here is an implementation of the function you described:
```
function even_binomial_Coeff_Sum(n: number): number {
    let result = 0;
    for (let i = 2; i <= n; i += 2) {
        result += Math.pow(i - 1, i);
    }
    return result;
}
```
This function uses a loop to iterate over all even integers from 2 to `n`, inclusive. For each iteration, it calculates the value of the corresponding binomial coefficient using the formula `(i-1)^i` and adds it to the running total. The final result is returned as the sum of these values.",0.0,153,153,"Counter({(1, 153): 1})",False
True,49,mbpp_86_centered_hexagonal_number,0.3,3.562767505645752,True," ```
function centered_hexagonal_number(n: number): number {
    const m = Math.floor((Math.sqrt(1+24*n) - 1)/6);
    return (m*(m-1))/2 + n;
}
```",0.0,64,64,"Counter({(1, 64): 1})",False
True,50,mbpp_574_surfacearea_cylinder,0.3,2.929884672164917,True," ```
function surfacearea_cylinder(radius: number, height: number): number {
  const pi = Math.PI;
  return (2 * pi) * radius * (radius + height);
}
```",0.0,50,50,"Counter({(1, 50): 1})",False
False,51,mbpp_430_parabola_directrix,0.3,10.090582370758057,True," ```
function parabola_directrix(a: number, b: number, c: number): number {
  const discriminant = b ** 2 - 4 * a * c;
  if (discriminant < 0) {
    throw new Error('Parabola has no real roots');
  } else if (discriminant === 0) {
    // Parabola is degenerate case where y-intercept is equal to x-axis intercept
    return -(b / (2 * a));
  } else {
    // Parabola has two distinct solutions
    const root1 = (-b + Math.sqrt(discriminant)) / (2 * a);
    const root2 = (-b - Math.sqrt(discriminant)) / (2 * a);
    return ((root1 + root2) / 2).toFixed(5);
  }
}
```",0.0,210,210,"Counter({(1, 210): 1})",False
True,52,mbpp_406_find_Parity,0.3,2.080909252166748,True," ```
function find_Parity(x: number): boolean {
    return x % 2 === 0;
}
```",0.0,31,31,"Counter({(1, 31): 1})",False
True,53,mbpp_605_prime_num,0.3,3.699317216873169,True," ```
function prime_num(num: number): boolean {
    let i = 2;
    while (i < num) {
        if (num % i === 0) {
            return false;
        }
        i++;
    }
    return true;
}
```",0.0,68,68,"Counter({(1, 68): 1})",False
True,54,mbpp_264_dog_age,0.3,2.85597825050354,True," ```
function dog_age(human_age: number): number {
    const DOG_YEARS = 7;
    return human_age * DOG_YEARS;
}
```",0.0,48,48,"Counter({(1, 48): 1})",False
True,55,mbpp_770_odd_num_sum,0.3,3.8213210105896,True," ```
function odd_num_sum(n: number): number {
    let sum = 0;
    for (let i = 1; i <= n; i += 2) {
        sum += Math.pow(i, 4);
    }
    return sum;
}
```",0.0,70,70,"Counter({(1, 70): 1})",False
True,56,mbpp_453_sumofFactors,0.3,4.237280607223511,True," ```
function sumofFactors(n: number): number {
    let sum = 0;
    for (let i = 2; i <= n / 2; i++) {
        if (n % i === 0) {
            sum += i;
        }
    }
    return sum;
}
```",0.0,79,79,"Counter({(1, 79): 1})",False
True,57,mbpp_244_next_Perfect_Square,0.3,3.975517988204956,True," ```
function next_Perfect_Square(N: number): number {
    let current = N;
    while (true) {
        if (Math.sqrt(current) % 1 === 0) {
            break;
        }
        current++;
    }
    return current;
}
```",0.0,74,74,"Counter({(1, 74): 1})",False
True,58,mbpp_93_power,0.3,3.401878833770752,True," ```
function power(a: number, b: number): number {
    let result = 1;
    for (let i = 0; i < b; i++) {
        result *= a;
    }
    return result;
}
```",0.0,61,61,"Counter({(1, 61): 1})",False
True,59,mbpp_291_count_no_of_ways,0.3,10.009173154830933,True," ```
function count_no_of_ways(n: number, k: number): number {
    // Initialize the dp array
    const dp = new Array(k).fill(0);

    // Base case
    if (n === 1) {
        return k;
    }

    // Loop through each post
    for (let i = 1; i < n - 1; i++) {
        // Get the current color index
        const currColorIndex = Math.floor((i * k) / (n - 1));

        // Update the dp array
        dp[currColorIndex]++;
    }

    // Return the total number of ways
    let totalNumberOfWays = 0;
    for (const num of dp) {
        totalNumberOfWays += num;
    }
    return totalNumberOfWays;
}
```",0.0,207,207,"Counter({(1, 207): 1})",False
True,60,mbpp_637_noprofit_noloss,0.3,6.7740912437438965,True," ```
function noprofit_noloss(actualCost: number, saleAmount: number): boolean {
  if (saleAmount > actualCost) {
    // If the sale amount is greater than the actual cost, then there is a profit
    return false;
  } else if (saleAmount < actualCost) {
    // If the sale amount is less than the actual cost, then there is a loss
    return false;
  } else {
    // If the sale amount equals the actual cost, then there is neither a profit nor a loss
    return true;
  }
}
```",0.0,137,137,"Counter({(1, 137): 1})",False
True,61,mbpp_293_otherside_rightangle,0.3,2.661240816116333,True," ```
function otherside_rightangle(w: number, h: number): number {
    return Math.sqrt((w * w) + (h * h));
}
```",0.0,42,42,"Counter({(1, 42): 1})",False
True,62,mbpp_592_sum_Of_product,0.3,8.824950695037842,True," ```
function sum_Of_product(n: number): number {
    let result = 0;
    for (let i = 1; i <= n; i++) {
        result += Math.pow(-1, i) * binomialCoefficient(i, 2);
    }
    return result;
}

function binomialCoefficient(n: number, k: number): number {
    if (k < 0 || k > n) {
        throw new Error(""Invalid input"");
    }
    if (k === 0 || k === n) {
        return 1;
    }
    return binomialCoefficient(n - 1, k - 1) + binomialCoefficient(n - 1, k);
}
```",0.0,181,181,"Counter({(1, 181): 1})",False
True,63,mbpp_256_count_Primes_nums,0.3,7.270847320556641,True," ```
function count_Primes_nums(n: number): number {
    if (n <= 2) {
        return 0;
    }
    let is_prime = Array(n).fill(true);
    for (let i = 2; i * i < n; i++) {
        if (!is_prime[i]) continue;
        for (let j = i * i; j < n; j += i) {
            is_prime[j] = false;
        }
    }
    return is_prime.filter((x) => x === true).length;
}
```",0.0,143,143,"Counter({(1, 143): 1})",False
True,64,mbpp_479_first_Digit,0.3,3.431342840194702,True," ```
function first_Digit(n: number): number {
    while (Math.floor(n /= 10) > 9);
    return n % 10;
}
```",0.0,47,47,"Counter({(1, 47): 1})",False
True,65,mbpp_267_square_Sum,0.3,4.866888284683228,True," ```
function square_Sum(n: number): number {
    let result = 0;
    for (let i = 1; i <= n && i % 2 !== 0; i++) {
        result += Math.pow(i, 2);
    }
    return result;
}
```",0.0,73,73,"Counter({(1, 73): 1})",False
True,66,mbpp_58_opposite_Signs,0.3,3.5120673179626465,True," ```
function opposite_Signs(x:number,y:number):boolean{
return (((x>0)&&(y<0))||((x<0)&&(y>0)));
}
```",0.0,50,50,"Counter({(1, 50): 1})",False
True,67,mbpp_103_eulerian_num,0.3,4.6246178150177,True," ```
function eulerian_num(n: number, m: number): number {
    if (m === 0) {
        return n - 1;
    } else {
        return (eulerianNum(n - 1, m - 1) + eulerianNum(n - 2, m)) % 64;
    }
}
```",0.0,87,87,"Counter({(1, 87): 1})",False
True,68,mbpp_20_is_woodall,0.3,7.03705644607544,True," ```
function is_woodall(n: number): boolean {
  const str = n.toString();
  const arr = Array.from(str);
  let count = 0;
  for (let i = 0; i < arr.length - 1; i++) {
      if (arr[i] === ""3"" && arr[i+1] === ""5"") {
          count++;
      } else if (arr[i] === ""5"" && arr[i+1] === ""3"") {
          count--;
      }
  }
  return count === 0;
}
```",0.0,143,143,"Counter({(1, 143): 1})",False
True,69,mbpp_96_divisor,0.3,3.8568427562713614,True," ```
function divisor(num: number): number {
   let count = 0;
   for (let i=1; i<= num; i++) {
      if (num % i === 0) {
         count++;
      }
   }
   return count;
}
```",0.0,70,70,"Counter({(1, 70): 1})",False
True,70,mbpp_404_minimum,0.3,2.8413896560668945,True," ```
function minimum(a: number, b: number): number {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
```",0.0,48,48,"Counter({(1, 48): 1})",False
False,71,mbpp_752_jacobsthal_num,0.3,6.720696687698364,True," ```
function jacobsthal_num(n: number): number {
    let num = 0;
    if (n === 0) {
        return 0;
    } else if (n === 1) {
        return 1;
    } else {
        for (let i = 2; i <= n; i++) {
            num += Math.pow(-1, i - 1) * binomialCoefficient(i - 1, n);
        }
        return num;
    }
}
```",0.0,127,127,"Counter({(1, 127): 1})",False
True,72,mbpp_765_is_polite,0.3,7.956348419189453,True," ```
function getNthPoliteNumber(n: number): number {
    let current = 1;
    while (current < n) {
        if (!isPolite(current)) {
            throw new Error(""Invalid input"");
        }
        current++;
    }
    return current;
}

function is_polite(n: number): boolean {
    const digits = String(n).split('');
    const hasAdjacentDigits = digits.some((digit, index) => {
        const nextIndex = index + 1;
        return nextIndex < digits.length && digit === digits[nextIndex];
    });
    return !hasAdjacentDigits;
}
```",0.0,163,163,"Counter({(1, 163): 1})",False
True,73,mbpp_801_test_three_equal,0.3,4.060250997543335,True," ```
function test_three_equal(x: number, y: number, z: number): number {
    let count = 0;
    if (x === y && x === z) {
        count++;
    }
    if (y === z) {
        count++;
    }
    return count;
}
```",0.0,76,76,"Counter({(1, 76): 1})",False
