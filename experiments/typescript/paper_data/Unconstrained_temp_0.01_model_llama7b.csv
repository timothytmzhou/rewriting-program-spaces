did_compile,benchmark_id,benchmark_name,temperature,execution_time,llm_finished,output,total_realizability_time,num_tokens_guessed,num_tokens_generated,tries_per_token,timed_out
True,0,mbpp_80_tetrahedral_number,0.01,3.806709289550781,True," ```
function tetrahedral_number(n: number): number {
  let result = 0;
  for (let i = 1; i <= n; i++) {
    result += Math.pow(i, 3);
  }
  return result;
}
```",0.0,67,67,"Counter({(1, 67): 1})",False
True,1,mbpp_392_get_max_sum,0.01,5.748968601226807,True," ```
function get_max_sum(n: number): number {
    if (n === 1) {
        return n;
    } else {
        const leftHalf = Math.floor(n / 2);
        const rightHalf = n - leftHalf;
        const leftSum = getMaxSum(leftHalf);
        const rightSum = getMaxSum(rightHalf);
        return Math.max(leftSum + rightSum, n);
    }
}
```",0.0,114,114,"Counter({(1, 114): 1})",False
True,2,mbpp_171_perimeter_pentagon,0.01,4.05897331237793,True," ```
function perimeter_pentagon(sideLengths: Array<number>): number {
    let perimeter = 0;
    sideLengths.forEach((length) => (perimeter += length));
    return perimeter;
}
```",0.0,58,58,"Counter({(1, 58): 1})",False
True,3,mbpp_127_multiply_int,0.01,2.3658089637756348,True," ```
function multiply_int(x: number, y: number): number {
    return x * y;
}
```",0.0,30,30,"Counter({(1, 30): 1})",False
True,4,mbpp_435_last_Digit,0.01,2.2845263481140137,True," ```
function last_Digit(n: number): number {
    return n % 10;
}
```",0.0,28,28,"Counter({(1, 28): 1})",False
True,5,mbpp_287_square_Sum,0.01,4.431608438491821,True," ```
function square_Sum(n: number): number {
    let result = 0;
    for (let i = 2; i <= n; i += 2) {
        result += Math.pow(i, 2);
    }
    return result;
}
```",0.0,68,68,"Counter({(1, 68): 1})",False
True,6,mbpp_606_radian_degree,0.01,2.738347053527832,True," ```
function radian_degree(degree: number): number {
    return degree * (Math.PI / 180);
}
```",0.0,37,37,"Counter({(1, 37): 1})",False
True,7,mbpp_803_is_perfect_square,0.01,3.470430850982666,True," ```
function is_perfect_square(n: number): boolean {
    let x = Math.sqrt(n);
    return (x - Math.floor(x)) === 0;
}
```",0.0,48,48,"Counter({(1, 48): 1})",False
True,8,mbpp_731_lateralsurface_cone,0.01,4.457829713821411,True," ```
function lateralsurface_cone(r: number, h: number): number {
    const pi = Math.PI; // Use predefined constant PI instead of calculating it every time
    return (1 / 3) * pi * r ** 2 * h;
}
```",0.0,68,68,"Counter({(1, 68): 1})",False
True,9,mbpp_581_surface_Area,0.01,4.232769250869751,True," ```
function surface_Area(baseEdge: number, sideLength: number): number {
    const surfaceArea = (2 * Math.pow(sideLength, 2)) + (4 * Math.pow(baseEdge, 2));
    return surfaceArea;
}
```",0.0,64,64,"Counter({(1, 64): 1})",False
True,10,mbpp_135_hexagonal_num,0.01,3.720225334167481,True," ```
function hexagonal_num(n: number): number {
  let num = 1;
  while (n > 0) {
    num += 6 * Math.pow(2, n - 1);
    n--;
  }
  return num;
}
```",0.0,69,69,"Counter({(1, 69): 1})",False
True,11,mbpp_739_find_Index,0.01,5.268438339233398,True," ```
function find_Index(n: number): number {
    let i = 1;
    while (i <= n) {
        if ((Math.pow(10, i - 1)) * (i * 2 - 1) === Math.pow(10, i) / 2) {
            break;
        } else {
            i++;
        }
    }
    return i;
}
```",0.0,101,101,"Counter({(1, 101): 1})",False
True,12,mbpp_17_square_perimeter,0.01,1.988379955291748,True," ```
function square_perimeter(sideLength: number): number {
  return 4 * sideLength;
}
```",0.0,29,29,"Counter({(1, 29): 1})",False
True,13,mbpp_77_is_Diff,0.01,3.1104862689971924,True," ```
function is_Diff(num: number): boolean {
  if (num % 11 === 0) {
    return true;
  } else {
    return false;
  }
}
```",0.0,56,56,"Counter({(1, 56): 1})",False
True,14,mbpp_126_sum,0.01,4.917882680892944,True," ```
function sum(num1: number, num2: number): number {
    let result = 0;
    for (let i = 1; i <= Math.min(num1, num2); i++) {
        if (num1 % i === 0 && num2 % i === 0) {
            result += i;
        }
    }
    return result;
}
```",0.0,98,98,"Counter({(1, 98): 1})",False
True,15,mbpp_266_lateralsurface_cube,0.01,4.448825836181641,True," ```
function lateralsurface_cube(sideLength: number): number {
    // Calculate the lateral surface area of a cube by multiplying the side length by 6.
    const lateralSurfaceArea = 6 * sideLength;
    
    // Return the calculated value as the result of the function.
    return lateralSurfaceArea;
}
```",0.0,87,87,"Counter({(1, 87): 1})",False
True,16,mbpp_797_sum_in_range,0.01,4.143118143081665,True," ```
function sum_in_range(l: number, r: number): number {
    let result = 0;
    for (let i = l; i <= r; i++) {
        if (i % 2 !== 0) {
            result += i;
        }
    }
    return result;
}
```",0.0,80,80,"Counter({(1, 80): 1})",False
True,17,mbpp_3_is_not_prime,0.01,4.546898126602173,True," ```
function is_not_prime(n: number): boolean {
    if (n <= 1) {
        return false;
    }
    let i = 2;
    while (i * i <= n) {
        if (n % i === 0) {
            return true;
        }
        i++;
    }
    return false;
}
```",0.0,90,90,"Counter({(1, 90): 1})",False
True,18,mbpp_458_rectangle_area,0.01,2.0476882457733154,True," ```
function rectangle_area(length: number, breadth: number): number {
    return length * breadth;
}
```",0.0,31,31,"Counter({(1, 31): 1})",False
True,19,mbpp_441_surfacearea_cube,0.01,2.5549588203430176,True," ```
function surfacearea_cube(sideLength: number): number {
  const surfaceArea = 6 * sideLength ** 2;
  return surfaceArea;
}
```",0.0,42,42,"Counter({(1, 42): 1})",False
True,20,mbpp_162_sum_series,0.01,3.6621482372283936,True," ```
function sum_series(n: number): number {
    let result = 0;
    for (let i = 0; i < n; i += 2) {
        result += n - 2 * i;
    }
    return result;
}
```",0.0,66,66,"Counter({(1, 66): 1})",False
True,21,mbpp_448_cal_sum,0.01,4.868853330612183,True," ```
function cal_sum(n: number): number {
    let result = 0;
    for (let i = 1; i <= n; i++) {
        result += Math.pow(-1, i+1) / (2 * i - 1);
    }
    return result;
}
```",0.0,75,75,"Counter({(1, 75): 1})",False
True,22,mbpp_738_geometric_sum,0.01,3.886900186538696,True," ```
function geometric_sum(n: number): number {
    if (n === 0) {
        return 0;
    } else {
        return n * geometricSum(n - 1);
    }
}
```",0.0,55,55,"Counter({(1, 55): 1})",False
True,23,mbpp_239_get_total_number_of_sequences,0.01,6.748347282409668,True," ```
function get_total_number_of_sequences(m: number, n: number): number {
    let total = 0;
    for (let i = 1; i <= n; i++) {
        const currentElement = Math.min(i * 2, m);
        if (currentElement > 0) {
            total += currentElement;
        } else {
            break;
        }
    }
    return total;
}
```",0.0,106,106,"Counter({(1, 106): 1})",False
True,24,mbpp_59_is_octagonal,0.01,4.270697116851807,True," ```
function is_octagonal(n: number): boolean {
    const root = Math.sqrt(24 * n);
    if (root % 1 === 0) {
        return true;
    } else {
        return false;
    }
}
```",0.0,65,65,"Counter({(1, 65): 1})",False
True,25,mbpp_638_wind_chill,0.01,8.642935037612915,True," ```
function wind_chill(windVelocity: number, temperatureInCelsius: number): number {
    const windChillFactor = 35.74 + (0.6215 * windVelocity) - (35.75 * Math.pow(windVelocity, 0.16)) + (0.4275 * temperatureInCelsius) - (0.19 * temperatureInCelsius * Math.pow(windVelocity, 0.16));
    return Math.round(windChillFactor);
}
```",0.0,142,142,"Counter({(1, 142): 1})",False
True,26,mbpp_577_last_Digit_Factorial,0.01,4.511019945144653,True," ```
function last_Digit_Factorial(n: number): number {
    let result = 1;
    for (let i = n; i > 0; i--) {
        result *= i;
    }
    return result % 10;
}
```",0.0,69,69,"Counter({(1, 69): 1})",False
True,27,mbpp_84_sequence,0.01,4.095927715301514,True," ```
function sequence(n: number): number {
    if (n === 1) {
        return 1;
    } else if (n === 2) {
        return 1;
    } else {
        return sequence(n - 1) + sequence(n - 2);
    }
}
```",0.0,77,77,"Counter({(1, 77): 1})",False
False,28,mbpp_724_power_base_sum,0.01,4.39454197883606,True," ```
function power_base_sum(base: number, power: number): number {
  let result = 0;
  for (let i = 1; i <= power; i++) {
    result += Math.pow(base, i).toString().split('').map((digit) => parseInt(digit));
  }
  return result;
}
```",0.0,83,83,"Counter({(1, 83): 1})",False
True,29,mbpp_641_is_nonagonal,0.01,5.125222682952881,True," ```
function is_nonagonal(n: number): boolean {
    const numDigits = (n).toString().length;
    if (numDigits === 1) {
        return true;
    } else if (numDigits > 1 && n % 2 !== 0) {
        return false;
    } else {
        return is_nonagonal((n / 2));
    }
}
```",0.0,101,101,"Counter({(1, 101): 1})",False
False,30,mbpp_279_is_num_decagonal,0.01,4.861017942428589,True," ```
function is_num_decagonal(n: number): boolean {
    const num = Math.pow((10 * (n - 1)), 2) + (10 * ((n - 1) * (3 * n - 2))));
    if (Number.isInteger(num)) {
        return true;
    } else {
        return false;
    }
}
```",0.0,95,95,"Counter({(1, 95): 1})",False
True,31,mbpp_72_dif_Square,0.01,5.22207498550415,True," ```
function dif_Square(n: number): boolean {
    let i = 1;
    while (i * i <= n) {
        const j = Math.sqrt((n - i * i));
        if (j % 1 === 0 && (i * i + j * j) === n) {
            return true;
        }
        i++;
    }
    return false;
}
```",0.0,103,103,"Counter({(1, 103): 1})",False
True,32,mbpp_781_count_divisors,0.01,4.2790117263793945,True," ```
function count_divisors(n: number): boolean {
    let count = 0;
    for (let i = 1; i <= n; i++) {
        if (n % i === 0) {
            count++;
        }
    }
    return count % 2 === 0;
}
```",0.0,79,79,"Counter({(1, 79): 1})",False
True,33,mbpp_309_maximum,0.01,2.815600633621216,True," ```
function maximum(a: number, b: number): number {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}
```",0.0,48,48,"Counter({(1, 48): 1})",False
True,34,mbpp_295_sum_div,0.01,4.045965194702148,True," ```
function sum_div(n: number): number {
    let sum = 0;
    for (let i = 1; i <= n / 2; i++) {
        if (n % i === 0) {
            sum += i;
        }
    }
    return sum;
}
```",0.0,77,77,"Counter({(1, 77): 1})",False
True,35,mbpp_14_find_Volume,0.01,2.4962875843048096,True," ```
function find_Volume(l: number, b: number, h: number): number {
    return (l * b * h) / 3;
}
```",0.0,41,41,"Counter({(1, 41): 1})",False
True,36,mbpp_167_next_power_of_2,0.01,3.022775411605835,True," ```
function next_power_of_2(n: number): number {
    let i = 1;
    while (i < n) {
        i *= 2;
    }
    return i;
}
```",0.0,53,53,"Counter({(1, 53): 1})",False
True,37,mbpp_600_is_Even,0.01,2.02556586265564,True," ```
function is_Even(n: number): boolean {
    return n % 2 === 0;
}
```",0.0,30,30,"Counter({(1, 30): 1})",False
True,38,mbpp_742_area_tetrahedron,0.01,2.840479850769043,True," ```
function area_tetrahedron(side: number): number {
    const halfSide = side / 2;
    return Math.sqrt(halfSide * (halfSide - side));
}
```",0.0,49,49,"Counter({(1, 49): 1})",False
True,39,mbpp_432_median_trapezium,0.01,5.028553485870361,True," ```
function median_trapezium(base1: number, base2: number, height: number): number {
  const halfHeight = height / 2;
  const semiPerimeter = (base1 + base2) * halfHeight;
  return Math.sqrt(semiPerimeter * (semiPerimeter - base1) * (semiPerimeter - base2) * (semiPerimeter - height));
}
```",0.0,99,99,"Counter({(1, 99): 1})",False
True,40,mbpp_234_volume_cube,0.01,2.1460108757019043,True," ```
function volume_cube(sideLength: number): number {
  return Math.pow(sideLength, 3);
}
```",0.0,33,33,"Counter({(1, 33): 1})",False
True,41,mbpp_422_find_Average_Of_Cube,0.01,3.8886778354644775,True," ```
function find_Average_Of_Cube(n: number): number {
    let total = 0;
    for (let i = 1; i <= n; i++) {
        total += Math.pow(i, 3);
    }
    return total / n;
}
```",0.0,73,73,"Counter({(1, 73): 1})",False
True,42,mbpp_292_find,0.01,2.101937770843506,True," ```
function find(n: number, m: number): number {
    return Math.floor(n / m);
}
```",0.0,32,32,"Counter({(1, 32): 1})",False
True,43,mbpp_389_find_lucas,0.01,4.440171718597412,True," ```
function find_lucas(n: number): number {
  if (n === 0) {
    return 2;
  } else if (n === 1) {
    return 1;
  } else {
    return findLucas(n - 1) + findLucas(n - 2);
  }
}
```",0.0,86,86,"Counter({(1, 86): 1})",False
True,44,mbpp_227_min_of_three,0.01,4.213073968887329,True," ```
function min_of_three(a: number, b: number, c: number): number {
    if (a < b && a < c) {
        return a;
    } else if (b < a && b < c) {
        return b;
    } else {
        return c;
    }
}
```",0.0,80,80,"Counter({(1, 80): 1})",False
True,45,mbpp_388_highest_Power_of_2,0.01,3.270665168762207,True," ```
function highest_Power_of_2(n: number): number {
    let i = 1;
    while (i <= n) {
        i *= 2;
    }
    return i / 2;
}
```",0.0,59,59,"Counter({(1, 59): 1})",False
True,46,mbpp_271_even_Power_Sum,0.01,3.770320415496826,True," ```
function even_Power_Sum(n: number): number {
    let sum = 0;
    for (let i = 2; i <= n; i += 2) {
        sum += Math.pow(i, 5);
    }
    return sum;
}
```",0.0,70,70,"Counter({(1, 70): 1})",False
True,47,mbpp_67_bell_number,0.01,9.20753002166748,True," ```
function bell_number(n: number): number {
    if (n === 0) {
        return 1;
    } else {
        let result = 0;
        for (let i = 0; i <= n - 1; i++) {
            result += binomialCoefficient(i, n);
        }
        return result;
    }
}

function binomialCoefficient(k: number, n: number): number {
    if (k < 0 || k > n) {
        return 0;
    } else if (k == 0 || k == n) {
        return 1;
    } else {
        return binomialCoefficient(k - 1, n - 1) + binomialCoefficient(k, n - 1);
    }
}
```",0.0,196,196,"Counter({(1, 196): 1})",False
True,48,mbpp_274_even_binomial_Coeff_Sum,0.01,3.977550029754639,True," ```
function even_binomial_Coeff_Sum(n: number): number {
    let result = 0;
    for (let i = 2; i <= n; i += 2) {
        result += Math.pow(1 / 2, i);
    }
    return result;
}
```",0.0,75,75,"Counter({(1, 75): 1})",False
True,49,mbpp_86_centered_hexagonal_number,0.01,4.504816293716431,True," ```
function centered_hexagonal_number(n: number): number {
  const num = (Math.sqrt((8 * n) + 1) - 1) / 2;
  if (num % 1 === 0) {
    return Math.floor(num);
  } else {
    return Math.ceil(num);
  }
}
```",0.0,87,87,"Counter({(1, 87): 1})",False
True,50,mbpp_574_surfacearea_cylinder,0.01,3.0640456676483154,True," ```
function surfacearea_cylinder(radius: number, height: number): number {
  const pi = Math.PI;
  return (2 * pi * radius) + (2 * pi * radius * height);
}
```",0.0,54,54,"Counter({(1, 54): 1})",False
True,51,mbpp_430_parabola_directrix,0.01,10.767964363098145,True," ```
function parabola_directrix(a: number, b: number, c: number): number {
    if (b === 0) {
        throw new Error(""Invalid input: The parameter 'b' cannot be zero."");
    }
    const discriminant = Math.pow(b, 2) - 4 * a * c;
    if (discriminant < 0) {
        throw new Error(`No real solutions exist for this parabola.`);
    } else if (discriminant === 0) {
        // The equation has only one solution
        return (-b / (2 * a));
    } else {
        // The equation has two distinct solutions
        const root1 = ((-b + Math.sqrt(discriminant)) / (2 * a));
        const root2 = ((-b - Math.sqrt(discriminant)) / (2 * a));
        return (root1 + root2) / 2;
    }
}
```",0.0,231,231,"Counter({(1, 231): 1})",False
True,52,mbpp_406_find_Parity,0.01,2.057184934616089,True," ```
function find_Parity(x: number): boolean {
    return x % 2 === 0;
}
```",0.0,31,31,"Counter({(1, 31): 1})",False
True,53,mbpp_605_prime_num,0.01,4.824915170669556,True," ```
function prime_num(num: number): boolean {
    let i = 2;
    while (i <= Math.sqrt(num)) {
        if (num % i === 0) {
            return false;
        }
        i++;
    }
    return num > 1;
}
```",0.0,75,75,"Counter({(1, 75): 1})",False
True,54,mbpp_264_dog_age,0.01,3.351511716842652,True," ```
function dog_age(human_age: number): number {
    const DOG_YEARS = 7;
    return human_age * DOG_YEARS;
}
```",0.0,48,48,"Counter({(1, 48): 1})",False
True,55,mbpp_770_odd_num_sum,0.01,4.581660747528076,True," ```
function odd_num_sum(n: number): number {
    let sum = 0;
    for (let i = 1; i <= n; i += 2) {
        sum += Math.pow(i, 4);
    }
    return sum;
}
```",0.0,70,70,"Counter({(1, 70): 1})",False
True,56,mbpp_453_sumofFactors,0.01,5.109750032424927,True," ```
function sumofFactors(n: number): number {
    let sum = 0;
    for (let i = 2; i <= n / 2; i++) {
        if (n % i === 0) {
            sum += i;
        }
    }
    return sum;
}
```",0.0,79,79,"Counter({(1, 79): 1})",False
True,57,mbpp_244_next_Perfect_Square,0.01,5.052111625671387,True," ```
function next_Perfect_Square(N: number): number {
    let current = N;
    while (true) {
        if (Math.sqrt(current) % 1 === 0) {
            break;
        } else {
            current++;
        }
    }
    return current;
}
```",0.0,79,79,"Counter({(1, 79): 1})",False
True,58,mbpp_93_power,0.01,3.7284493446350098,True," ```
function power(a: number, b: number): number {
    let result = 1;
    for (let i = 0; i < b; i++) {
        result *= a;
    }
    return result;
}
```",0.0,61,61,"Counter({(1, 61): 1})",False
True,59,mbpp_291_count_no_of_ways,0.01,14.41571879386902,True," ```
function count_no_of_ways(n: number, k: number): number {
    // Initialize the dp array
    const dp = new Array(k).fill(0);
    
    // Base case
    dp[0] = 1;
    
    // Loop through each post
    for (let i = 1; i <= n; i++) {
        // Loop through each color
        for (let j = 0; j < k; j++) {
            // If the current post is not the first one
            if (i > 1) {
                // Check if the previous post has the same color as the current post
                if (j === i - 1 || j === i - 2) {
                    // Increment the count by the value from the previous post
                    dp[j] += dp[j - 1];
                } else {
                    // Otherwise, increment the count by the value from the previous post
                    dp[j] += dp[j - 1];
                }
            } else {
                // The first post can only have one color
                dp[j]++;
            }
        }
    }
    
    // Return the total number of ways
    return dp.reduce((a, b) => a + b, 0);
}
```",0.0,310,310,"Counter({(1, 310): 1})",False
True,60,mbpp_637_noprofit_noloss,0.01,6.778878927230835,True," ```
function noprofit_noloss(actualCost: number, saleAmount: number): boolean {
  if (saleAmount > actualCost) {
    // If the sale amount is greater than the actual cost, then there is a profit
    return false;
  } else if (saleAmount < actualCost) {
    // If the sale amount is less than the actual cost, then there is a loss
    return false;
  } else {
    // If the sale amount equals the actual cost, then there is neither a profit nor a loss
    return true;
  }
}
```",0.0,137,137,"Counter({(1, 137): 1})",False
True,61,mbpp_293_otherside_rightangle,0.01,2.557006597518921,True," ```
function otherside_rightangle(w: number, h: number): number {
    return Math.sqrt((w * w) + (h * h));
}
```",0.0,42,42,"Counter({(1, 42): 1})",False
True,62,mbpp_592_sum_Of_product,0.01,4.697368621826172,True," ```
function sum_Of_product(n: number): number {
    let result = 0;
    for (let i = 1; i <= n; i++) {
        result += Math.pow(-1, i) * (i - 1)! / ((2*i - 1)*(2*i))!;
    }
    return result;
}
```",0.0,89,89,"Counter({(1, 89): 1})",False
True,63,mbpp_256_count_Primes_nums,0.01,6.977705478668213,True," ```
function count_Primes_nums(n: number): number {
    if (n <= 2) {
        return 0;
    }
    let is_prime = Array(n).fill(true);
    for (let i = 2; i * i < n; i++) {
        if (!is_prime[i]) continue;
        for (let j = i * i; j < n; j += i) {
            is_prime[j] = false;
        }
    }
    return is_prime.filter((x) => x === true).length;
}
```",0.0,143,143,"Counter({(1, 143): 1})",False
True,64,mbpp_479_first_Digit,0.01,2.3685190677642822,True," ```
function first_Digit(n: number): number {
    const str = n.toString();
    return parseInt(str[0]);
}
```",0.0,38,38,"Counter({(1, 38): 1})",False
True,65,mbpp_267_square_Sum,0.01,3.674516916275024,True," ```
function square_Sum(n: number): number {
    let result = 0;
    for (let i = 1; i <= n; i += 2) {
        result += Math.pow(i, 2);
    }
    return result;
}
```",0.0,67,67,"Counter({(1, 67): 1})",False
True,66,mbpp_58_opposite_Signs,0.01,3.772372007369995,True," ```
function opposite_Signs(x: number, y: number): boolean {
    return (Math.sign(x) === -1 && Math.sign(y) === 1) || (Math.sign(x) === 1 && Math.sign(y) === -1);
}
```",0.0,70,70,"Counter({(1, 70): 1})",False
True,67,mbpp_103_eulerian_num,0.01,4.309102773666382,True," ```
function eulerian_num(n: number, m: number): number {
    if (m === 0) {
        return n;
    } else {
        return (eulerianNum(n - 1, m - 1) * m) % 1000000007;
    }
}
```",0.0,82,82,"Counter({(1, 82): 1})",False
True,68,mbpp_20_is_woodall,0.01,6.431957483291626,True," ```
function is_woodall(n: number): boolean {
  const str = n.toString();
  const arr = Array.from(str);
  let count = 0;
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] === ""3"") {
      count++;
    } else if (arr[i] !== ""1"" && arr[i] !== ""2"") {
      return false;
    }
  }
  return count > 0 && count <= 2;
}
```",0.0,132,132,"Counter({(1, 132): 1})",False
True,69,mbpp_96_divisor,0.01,3.778316020965576,True," ```
function divisor(n: number): number {
    let count = 0;
    for (let i = 1; i <= n; i++) {
        if (n % i === 0) {
            count++;
        }
    }
    return count;
}
```",0.0,70,70,"Counter({(1, 70): 1})",False
True,70,mbpp_404_minimum,0.01,2.798309087753296,True," ```
function minimum(a: number, b: number): number {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
```",0.0,48,48,"Counter({(1, 48): 1})",False
True,71,mbpp_752_jacobsthal_num,0.01,6.440751552581787,True," ```
function jacobsthal_num(n: number): number {
    let num = 0;
    if (n === 0) {
        return 0;
    } else if (n === 1) {
        return 1;
    } else {
        for (let i = 2; i <= n; i++) {
            num += Math.pow(-1, i - 1);
        }
        return num * Math.pow(2, n - 1);
    }
}
```",0.0,123,123,"Counter({(1, 123): 1})",False
True,72,mbpp_765_is_polite,0.01,11.0881450176239,True," ```
function getNthPoliteNumber(n: number): number {
    let currentNumber = 1;
    while (currentNumber < n) {
        if (!isPolite(currentNumber)) {
            currentNumber++;
            continue;
        }
        const nextNumber = currentNumber * 2 - 1;
        if (nextNumber > n) {
            break;
        } else {
            currentNumber = nextNumber;
        }
    }
    return currentNumber;
}

function is_polite(n: number): boolean {
    const digits = String(n).split("""");
    let hasAdjacentDigits = false;
    for (let i = 0; i < digits.length - 1; i++) {
        if (digits[i] === digits[i + 1]) {
            hasAdjacentDigits = true;
            break;
        }
    }
    return !hasAdjacentDigits && n % 7 !== 0;
}
```",0.0,238,238,"Counter({(1, 238): 1})",False
True,73,mbpp_801_test_three_equal,0.01,4.049340009689331,True," ```
function test_three_equal(x: number, y: number, z: number): number {
    let count = 0;
    if (x === y && x === z) {
        count++;
    }
    if (y === z) {
        count++;
    }
    return count;
}
```",0.0,76,76,"Counter({(1, 76): 1})",False
