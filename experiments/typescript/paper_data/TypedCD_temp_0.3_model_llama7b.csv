did_compile,benchmark_id,benchmark_name,temperature,execution_time,llm_finished,output,total_realizability_time,num_tokens_guessed,num_tokens_generated,tries_per_token,timed_out
True,0,mbpp_80_tetrahedral_number,0.3,13.842360019683838,True," ```
function tetrahedral_number(n: number): number {
  let result: number = 0;
  for (let i: number = 1; i <= n; i++) {
    result += Math.pow(i, 3);
  }
  return result;
}
```",8.680973052978516,72,71,"Counter({(1, 70): 1, (2, 1): 1})",False
True,1,mbpp_392_get_max_sum,0.3,87.66662621498108,True," ```
function get_max_sum(n: number): number {
    if (n === 1) {
        return n;
    } else {
        const leftHalf: number = Math.floor(n / 2);
        const rightHalf: number = n - leftHalf;
        const leftSum: number = getMaxSum(leftHalf);
        const rightSum: number = getMaxSum(rightHalf);
        return Math.max(leftSum + rightSum + n);
    }
}
```",79.65953207015991,125,122,"Counter({(1, 119): 1, (2, 3): 1})",False
True,2,mbpp_171_perimeter_pentagon,0.3,13.076959133148192,True," ```
function perimeter_pentagon(sideLengths: number): number {
  let perimeter: number = 0;
  for (let i: number = 0; i < sideLengths; i++) {
      perimeter += sideLengths;
  }
  return perimeter;
}
```",8.013230562210083,82,73,"Counter({(1, 67): 1, (2, 5): 1, (5, 1): 1})",False
True,3,mbpp_127_multiply_int,0.3,3.661571264266968,True," ```
function multiply_int(x: number, y: number): number {
    return x * y;
}
```",1.4805660247802734,30,30,"Counter({(1, 30): 1})",False
True,4,mbpp_435_last_Digit,0.3,3.8511128425598153,True," ```
function last_Digit(n: number): number {
    return n % 10;
}
```",1.6707863807678225,29,29,"Counter({(1, 29): 1})",False
True,5,mbpp_287_square_Sum,0.3,13.853671073913574,True," ```
function square_Sum(n: number): number {
    let result: number = 0;
    for (let i: number = 2; i <= n; i += 1) {
        result += Math.pow(i, 2);
    }
    return result;
}
```",8.916749954223633,73,72,"Counter({(1, 71): 1, (2, 1): 1})",False
True,6,mbpp_606_radian_degree,0.3,4.847420930862427,True," ```
function radian_degree(degree: number): number {
    return degree * (Math.PI / 180);
}
```",2.288052558898926,37,37,"Counter({(1, 37): 1})",False
True,7,mbpp_803_is_perfect_square,0.3,10.126033306121826,True," ```
function is_perfect_square(n: number): boolean {
    let x: number = Math.sqrt(n);
    if (x % 1 === 0) {
        return true;
    } else {
        return false;
    }
}
```",5.685210704803467,66,65,"Counter({(1, 64): 1, (2, 1): 1})",False
True,8,mbpp_731_lateralsurface_cone,0.3,10.51442551612854,True," ```
function lateralsurface_cone(r: number, h: number): number {
    const pi: number = Math.PI; // PI constant
    return (1 / 2) * pi * r * (r + h);
}
```",6.190103769302368,62,61,"Counter({(1, 60): 1, (2, 1): 1})",False
True,9,mbpp_581_surface_Area,0.3,8.940680265426636,True," ```
function surface_Area(baseEdge: number, height: number): number {
    return (2 * Math.pow(baseEdge, 2)) + (4 * Math.pow(height, 2));
}
```",5.426220178604126,53,53,"Counter({(1, 53): 1})",False
True,10,mbpp_135_hexagonal_num,0.3,12.057482242584229,True," ```
function hexagonal_num(n: number): number {
  let num: number = 1;
  while (n > 0) {
    num += 2 * n - 1;
    n++;
  }
  return num;
}
```",7.6537463665008545,69,64,"Counter({(1, 61): 1, (2, 2): 1, (4, 1): 1})",False
True,11,mbpp_739_find_Index,0.3,24.108309507369995,True," ```
function find_Index(n: number): number {
    let i: number = 1;
    while (i < 10) {
        if (Math.pow(i, 2) % 10 === 0) {
            return Math.log2(i);
        } else {
            i++;
        }
    }
    return 0;
}
```",17.224356651306152,108,93,"Counter({(1, 87): 1, (2, 2): 1, (4, 3): 1, (5, 1): 1})",False
True,12,mbpp_17_square_perimeter,0.3,3.800661087036133,True," ```
function square_perimeter(sideLength: number): number {
  return (4 * sideLength);
}
```",1.69492506980896,29,29,"Counter({(1, 29): 1})",False
True,13,mbpp_77_is_Diff,0.3,7.273460626602173,True," ```
function is_Diff(num: number): boolean {
  if (num % 11 === 0) {
    return true;
  } else {
    return false;
  }
}
```",3.704478025436402,56,56,"Counter({(1, 56): 1})",False
True,14,mbpp_126_sum,0.3,25.13643884658813,True," ```
function sum(num1: number, num2: number): number {
let result: number = 0;
for (let i: number = 1; i <= Math.min(num1); i++) {
if ((num1 % i == 0) && (num2 % i == 0)) {
result += i;
}
}
return result;
}
```",18.79644727706909,100,94,"Counter({(1, 90): 1, (3, 2): 1, (2, 2): 1})",False
True,15,mbpp_266_lateralsurface_cube,0.3,10.66772747039795,True," ```
function lateralsurface_cube(sideLength: number): number {
  const lateralSurfaceArea: number = (6 * sideLength) - (2 * Math.pow(sideLength, 2));
  return lateralSurfaceArea;
}
```",6.346428394317627,68,64,"Counter({(1, 61): 1, (2, 2): 1, (3, 1): 1})",False
True,16,mbpp_797_sum_in_range,0.3,17.97476029396057,True," ```
function sum_in_range(l: number, r: number): number {
	let result: number = 0;
	for (let i: number = l; i <= r; i++) {
		if (i % 2 !== 0) {
			result += i;
		}
	}
	return result;
}
```",12.411056280136108,89,88,"Counter({(1, 87): 1, (2, 1): 1})",False
True,17,mbpp_3_is_not_prime,0.3,22.37537240982056,True," ```
function is_not_prime(n: number): boolean {
    if (n <= 1) {
        return false;
    }
    let i: number = 2;
    while (i * i <= n) {
        if (n % i === 0) {
            return true;
        }
        i += 1;
    }
    return false;
}
```",16.373471975326538,96,95,"Counter({(1, 94): 1, (2, 1): 1})",False
True,18,mbpp_458_rectangle_area,0.3,3.99550199508667,True," ```
function rectangle_area(length: number, breadth: number): number {
    return length * breadth;
}
```",1.695811748504639,31,31,"Counter({(1, 31): 1})",False
True,19,mbpp_441_surfacearea_cube,0.3,6.38568639755249,True," ```
function surfacearea_cube(sideLength: number): number {
  const surfaceArea: number = 6 * sideLength * sideLength;
  return surfaceArea;
}
```",3.1882998943328857,46,44,"Counter({(1, 42): 1, (2, 2): 1})",False
True,20,mbpp_162_sum_series,0.3,12.708495140075684,True," ```
function sum_series(n: number): number {
    let result: number = 0;
    for (let i: number = 0; i < n; i++) {
        result += n - (2 * i);
    }
    return result;
}
```",8.180007696151733,68,67,"Counter({(1, 66): 1, (2, 1): 1})",False
True,21,mbpp_448_cal_sum,0.3,13.273735523223875,True," ```
function cal_sum(n: number): number {
    let result: number = 0;
    for (let i: number = 1; i <= n; i++) {
        result += Math.pow(i, 2);
    }
    return result;
}
```",8.709671974182129,71,69,"Counter({(1, 67): 1, (2, 2): 1})",False
True,22,mbpp_738_geometric_sum,0.3,7.855373620986938,True," ```
function geometric_sum(n: number): number {
    if (n === 0) {
        return 0;
    } else {
        return n * geometricSum(n - 1);
    }
}
```",4.163575649261475,55,55,"Counter({(1, 55): 1})",False
True,23,mbpp_239_get_total_number_of_sequences,0.3,45.44986772537232,True," ```
function get_total_number_of_sequences(m: number, n: number): number {
    let totalCount: number = 0;
    for (let i: number = 1; i <= n; i++) {
        const currentValue: number = Math.pow(2, i);
        if (currentValue >= m) {
            totalCount++;
        } else {
            totalCount += Math.floor((m - currentValue) / 2);
        }
    }
    return totalCount;
}
```",37.05153608322144,130,122,"Counter({(1, 115): 1, (2, 6): 1, (3, 1): 1})",False
True,24,mbpp_59_is_octagonal,0.3,100.26689720153809,True," ```
function is_octagonal(n: number): boolean {
   let numString: number = n;
   if (numString % 2 === 0) {
      const root: number = Math.sqrt(numString);
      const squareRoot: number = root * root;
      return squareRoot === numString;
   } else {
      const root: number = Math.sqrt(numString);
      const squareRoot: number = root * root;
      return squareRoot - numString < numString - squareRoot;
   }
}
```",91.3423147201538,139,128,"Counter({(1, 121): 1, (2, 6): 1, (6, 1): 1})",False
True,25,mbpp_638_wind_chill,0.3,44.81238126754761,True," ```
function wind_chill(windVelocity: number, temperatureInCelsius: number): number {
  const windChillFactor: number = 33.5 * Math.pow((windVelocity / 18), 0.7);
  const windChillAdjustment: number = (temperatureInCelsius - 10) / 2;
  const windChillIndex: number = Math.ceil(windChillFactor + windChillAdjustment);
  
  return windChillIndex;
}
```",36.31746220588684,136,133,"Counter({(1, 130): 1, (2, 3): 1})",False
True,26,mbpp_577_last_Digit_Factorial,0.3,29.50395560264588,True," ```
function last_Digit_Factorial(n: number): number {
    let result: number = n;
    while (result > 9) {
        result = 0;
        for (let i: number = 1; i <= n; i++) {
            result += i * Math.floor(i / 10);
        }
    }
    return result;
}
```",22.977596044540405,97,96,"Counter({(1, 95): 1, (2, 1): 1})",False
True,27,mbpp_84_sequence,0.3,35.63137364387512,True," ```
function sequence(n: number): number {
    if (n === 0) {
        return 1;
    } else if (n === 1) {
        return 1;
    } else {
        const previousNumberInSequence: number = sequence(n - 2);
        const currentNumberInSequence: number = previousNumberInSequence + sequence(n - 3);
        return currentNumberInSequence;
    }
}
```",28.707273244857788,110,106,"Counter({(1, 102): 1, (2, 4): 1})",False
True,28,mbpp_724_power_base_sum,0.3,14.277910232543944,True," ```
function power_base_sum(base: number, power: number): number {
    let result: number = 0;
    for (let i: number = 1; i <= power; i++) {
        result += Math.pow(base, i);
    }
    return result;
}
```",9.459346532821655,75,74,"Counter({(1, 73): 1, (2, 1): 1})",False
True,29,mbpp_641_is_nonagonal,0.3,49.42282438278198,True," ```
function is_nonagonal(n: number): boolean {
    const numDigits: number = Math.floor(Math.log2(n) / Math.log2(10));
    if (numDigits % 3 !== 0) {
        return false;
    }
    let digitSum: number = 0;
    while (n > 0) {
        digitSum += n % 10;
        n = Math.floor(n / 10);
    }
    return digitSum === 9 * numDigits;
}
```",40.54528856277466,140,135,"Counter({(1, 131): 1, (2, 3): 1, (3, 1): 1})",False
True,30,mbpp_279_is_num_decagonal,0.3,15.9370436668396,True," ```
function is_num_decagonal(n: number): boolean {
    const num_digits: number = Math.floor(Math.log2(n)) / Math.log2(10);
    if (num_digits === 3) {
        return true;
    } else {
        return false;
    }
}
```",9.761077642440796,90,84,"Counter({(1, 79): 1, (2, 4): 1, (3, 1): 1})",False
True,31,mbpp_72_dif_Square,0.3,11.496678352355955,True," ```
function dif_Square(n: number): boolean {
    let x: number = Math.floor(Math.sqrt(n));
    if (x * x === n) {
        return true;
    } else {
        return false;
    }
}
```",6.592229843139648,71,70,"Counter({(1, 69): 1, (2, 1): 1})",False
True,32,mbpp_781_count_divisors,0.3,17.248610019683838,True," ```
function count_divisors(n: number): boolean {
    let count: number = 0;
    for (let i: number = 1; i <= n; i++) {
        if (n % i === 0) {
            count++;
        }
    }
    return count % 2 === 0;
}
```",11.403069257736206,85,83,"Counter({(1, 81): 1, (2, 2): 1})",False
True,33,mbpp_309_maximum,0.3,6.419997215270996,True," ```
function maximum(a: number, b: number): number {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}
```",3.1784682273864746,48,48,"Counter({(1, 48): 1})",False
True,34,mbpp_295_sum_div,0.3,16.67680811882019,True," ```
function sum_div(n: number): number {
  let sum: number = 0;
  for (let i: number = 1; i <= n / 2; i++) {
    if (n % i === 0) {
      sum += i;
    }
  }
  return sum;
}
```",11.263514280319214,82,81,"Counter({(1, 80): 1, (2, 1): 1})",False
True,35,mbpp_14_find_Volume,0.3,5.940475463867188,True," ```
function find_Volume(l: number, b: number, h: number): number {
    return (l * b * h) / 3;
}
```",3.020723342895508,41,41,"Counter({(1, 41): 1})",False
True,36,mbpp_167_next_power_of_2,0.3,9.611227989196776,True," ```
function next_power_of_2(n: number): number {
    let i: number = 1;
    while (i < n) {
        i *= 2;
    }
    return i;
}
```",5.532073020935059,56,55,"Counter({(1, 54): 1, (2, 1): 1})",False
True,37,mbpp_600_is_Even,0.3,3.821415662765503,True," ```
function is_Even(n: number): boolean {
    return n % 2 === 0;
}
```",1.536057949066162,30,30,"Counter({(1, 30): 1})",False
True,38,mbpp_742_area_tetrahedron,0.3,89.65593981742859,True," ```
function area_tetrahedron(side: number): number {
    const squareSideArea: number = side * side;
    const halfSquareSideArea: number = squareSideArea / 2;
    const sqrtOfHalfSquareSideArea: number = Math.sqrt(halfSquareSideArea);
    const volumeOfPyramidWithBaseOnEachFace: number = side * sqrtOfHalfSquareSideArea;
    const surfaceAreaOfPyramid: number = 4 * volumeOfPyramidWithBaseOnEachFace;
    return surfaceAreaOfPyramid;
}
```",80.42912483215332,145,142,"Counter({(1, 139): 1, (2, 3): 1})",False
True,39,mbpp_432_median_trapezium,0.3,17.287657499313354,True," ```
function median_trapezium(base1: number, base2: number, height: number): number {
  const halfHeight: number = height / 2;
  const triangleArea: number = (halfHeight * (base1 + base2)) / 2;
  return Math.sqrt(triangleArea);
}
```",12.443753004074097,77,76,"Counter({(1, 75): 1, (2, 1): 1})",False
True,40,mbpp_234_volume_cube,0.3,4.1628029346466064,True," ```
function volume_cube(sideLength: number): number {
return Math.pow(sideLength, 3);
}
```",1.6825602054595947,32,32,"Counter({(1, 32): 1})",False
True,41,mbpp_422_find_Average_Of_Cube,0.3,14.68199372291565,True," ```
function find_Average_Of_Cube(n: number): number {
    let total: number = 0;
    for (let i: number = 1; i <= n; i++) {
        total += Math.pow(i, 3);
    }
    return total / n;
}
```",9.462889432907104,78,77,"Counter({(1, 76): 1, (2, 1): 1})",False
True,42,mbpp_292_find,0.3,4.71247673034668,True," ```
function find(n: number, m: number): number {
    return Math.floor(n / m);
}
```",2.107388496398926,32,32,"Counter({(1, 32): 1})",False
True,43,mbpp_389_find_lucas,0.3,15.40850281715393,True," ```
function find_lucas(n: number): number {
  if (n === 0) {
    return 2;
  } else if (n === 1) {
    return 1;
  } else {
    return findLucas(n - 1) + findLucas(n - 2);
  }
}
```",9.513105869293211,86,86,"Counter({(1, 86): 1})",False
True,44,mbpp_227_min_of_three,0.3,14.171801567077637,True," ```
function min_of_three(a: number, b: number, c: number): number {
    if (a < b && a < c) {
        return a;
    } else if (b < a && b < c) {
        return b;
    } else {
        return c;
    }
}
```",8.826181173324585,80,80,"Counter({(1, 80): 1})",False
True,45,mbpp_388_highest_Power_of_2,0.3,28.222710371017456,True," ```
function highest_Power_of_2(n: number): number {
    let i: number = 1;
    while (i <= n) {
        if ((n % i) === 0 && (Math.pow(i, 2)) <= n) {
            return Math.pow(i, 2);
        } else {
            i++;
        }
    }
    return n;
}
```",21.196919679641724,105,100,"Counter({(1, 97): 1, (2, 2): 1, (4, 1): 1})",False
True,46,mbpp_271_even_Power_Sum,0.3,14.552246809005736,True," ```
function even_Power_Sum(n: number): number {
    let sum: number = 0;
    for (let i: number = 2; i <= n; i += 2) {
        sum += Math.pow(i, 5);
    }
    return sum;
}
```",8.89030647277832,75,74,"Counter({(1, 73): 1, (2, 1): 1})",False
True,47,mbpp_67_bell_number,0.3,21.802170038223267,True," ```
function bell_number(n: number): number {
   if (n === 0) {
      return 1;
   } else {
      let result: number = 0;
      for (let i: number = 0; i < n; i++) {
         result += bellNumber(i);
      }
      return result;
   }
}
```",15.531170129776,90,88,"Counter({(1, 86): 1, (2, 2): 1})",False
True,48,mbpp_274_even_binomial_Coeff_Sum,0.3,15.728330612182615,True," ```
function even_binomial_Coeff_Sum(n: number): number {
    let result: number = 0;
    for (let i: number = 2; i <= n; i += 2) {
        result += Math.pow(i - 1, i);
    }
    return result;
}
```",10.067095756530762,81,79,"Counter({(1, 77): 1, (2, 2): 1})",False
True,49,mbpp_86_centered_hexagonal_number,0.3,22.536152362823486,True," ```
function centered_hexagonal_number(n: number): number {
    const numDigits: number = Math.floor(Math.log2(n)) + 1;
    let result: number = n * (3 * numDigits - 1) / 2;
    if (numDigits % 2 === 0) {
        result += n;
    }
    return result;
}
```",15.227760314941406,104,99,"Counter({(1, 95): 1, (2, 3): 1, (3, 1): 1})",False
True,50,mbpp_574_surfacearea_cylinder,0.3,11.138442039489746,True," ```
function surfacearea_cylinder(r: number, h: number): number {
  const pi: number = Math.PI; // Use predefined constant PI
  return (2 * r * r) * pi + (2 * r * h);
}
```",6.929133176803589,64,63,"Counter({(1, 62): 1, (2, 1): 1})",False
False,51,mbpp_430_parabola_directrix,0.3,160.45336151123047,False," ```
function parabola_directrix(a: number, b: number, c: number): number {
    if (a === 0) {
        // The equation is linear, so there is no directrix.
        return 0;
    } else {
        const discriminant: number = b * b - 4 * a * c;
        if (discriminant < 0) {
            // There are no real solutions, so there is no directrix.
            return 0;
        } else {
            const root1: number = Math.sqrt(discriminant);
            const root2: number = root1 * Math.pow(b, 3) / Math.pow(a, 2);
            const x1: number = root1 / (2 * aWith",136.6755611896515,400,183,"Counter({(1, 171): 1, (2, 8): 1, (7, 1): 1, (3, 3): 1})",True
True,52,mbpp_406_find_Parity,0.3,4.529145002365112,True," ```
function find_Parity(x: number): boolean {
    return x % 2 === 0 ? false : true;
}
```",1.8279469013214111,35,35,"Counter({(1, 35): 1})",False
True,53,mbpp_605_prime_num,0.3,15.139400959014893,True," ```
function prime_num(num: number): boolean {
    let i: number = 2;
    while (i <= Math.sqrt(num)) {
        if (num % i === 0) {
            return false;
        }
        i++;
    }
    return true;
}
```",9.807170629501345,75,74,"Counter({(1, 73): 1, (2, 1): 1})",False
True,54,mbpp_264_dog_age,0.3,16.189860582351685,True," ```
function dog_age(human_age: number): number {
    // A human year is equivalent to 7 dog years
    const DOG_YEARS_PER_HUMAN_YEAR: number = 7;
    
    // Calculate the dog years based on the human age
    let dog_years: number = human_age * DOG_YEARS_PER_HUMAN_YEAR;
    
    // Return the calculated dog years
    return dog_years;
}
```",8.301794528961182,122,121,"Counter({(1, 120): 1, (2, 1): 1})",False
True,55,mbpp_770_odd_num_sum,0.3,13.81771183013916,True," ```
function odd_num_sum(n: number): number {
    let sum: number = 0;
    for (let i: number = 1; i <= n; i += 2) {
        sum += Math.pow(i, 4);
    }
    return sum;
}
```",8.813787698745728,75,74,"Counter({(1, 73): 1, (2, 1): 1})",False
True,56,mbpp_453_sumofFactors,0.3,18.332693338394165,True," ```
function sumofFactors(n: number): number {
    let sum: number = 0;
    for (let i: number = 1; i <= n; i++) {
        if (i % 2 === 0 && n % i === 0) {
            sum += i;
        }
    }
    return sum;
}
```",12.79438543319702,89,88,"Counter({(1, 87): 1, (2, 1): 1})",False
True,57,mbpp_244_next_Perfect_Square,0.3,13.053205251693726,True," ```
function next_Perfect_Square(N: number): number {
    let i: number = N + 1; // Start from the next integer after N
    while (i * i <= N) {
        i++; // Increment by 1 if the current value is not a perfect square
    }
    return i;
}
```",7.615726709365845,82,81,"Counter({(1, 80): 1, (2, 1): 1})",False
True,58,mbpp_93_power,0.3,12.242629289627075,True," ```
function power(a: number, b: number): number {
    let result: number = 1;
    for (let i: number = 0; i < b; i++) {
        result *= a;
    }
    return result;
}
```",7.641668558120727,66,65,"Counter({(1, 64): 1, (2, 1): 1})",False
True,59,mbpp_291_count_no_of_ways,0.3,32.0909116268158,True," ```
function count_no_of_ways(n: number, k: number): number {
    // Initialize the dp array
    const dp: number = 0;

    // Base case
    if (n === 1) {
        return 1;
    }

    // Recursive call
    let totalCount: number = 0;
    for (let i: number = 0; i < k; i++) {
        totalCount += dp;
    }

    return totalCount;
}
```",23.75737190246582,139,124,"Counter({(1, 116): 1, (2, 4): 1, (3, 1): 1, (4, 3): 1})",False
True,60,mbpp_637_noprofit_noloss,0.3,13.185416221618652,True," ```
function noprofit_noloss(actualCost: number, saleAmount: number): boolean {
  if (saleAmount > actualCost) {
    return false; // There is a profit
  } else if (saleAmount < actualCost) {
    return false; // There is a loss
  } else {
    return true; // No profit or loss
  }
}
```",7.5413978099823,93,93,"Counter({(1, 93): 1})",False
True,61,mbpp_293_otherside_rightangle,0.3,6.286112070083618,True," ```
function otherside_rightangle(w: number, h: number): number {
    return Math.sqrt((w * w) + (h * h));
}
```",3.3845338821411133,42,42,"Counter({(1, 42): 1})",False
True,62,mbpp_592_sum_Of_product,0.3,19.227673530578613,True," ```
function sum_Of_product(n: number): number {
    let result: number = 0;
    for (let i: number = 1; i <= n; i++) {
        result += Math.pow((i - 1), (2 * i) - 1);
    }
    return result;
}
```",13.838083505630491,82,80,"Counter({(1, 78): 1, (2, 2): 1})",False
True,63,mbpp_256_count_Primes_nums,0.3,82.71303105354309,True," ```
function count_Primes_nums(n: number): number {
    if (n <= 2) {
        return 0;
    }
    let numOfPrimes: number = 1; // there is one prime number smaller than n which is 2
    for (let i: number = 3; i < n; i += 2) {
        let j: number = Math.sqrt(i);
        while (j >= 2 && i % j !== 0) {
            j = Math.floor(j - 1);
        }
        if (j === 1) {
            numOfPrimes++;
        }
    }
    return numOfPrimes;
}
```",71.91702890396118,171,165,"Counter({(1, 161): 1, (2, 3): 1, (4, 1): 1})",False
True,64,mbpp_479_first_Digit,0.3,16.240710735321045,True," ```
function first_Digit(n: number): number {
    const strN: number = n + 10 * Math.floor((Math.log2(n) / Math.log2(10))); // Convert number to string
    return strN % 10; // Return first digit as an integer
}
```",10.08132791519165,105,75,"Counter({(1, 67): 1, (2, 4): 1, (5, 1): 1, (18, 1): 1, (3, 1): 1, (4, 1): 1})",False
True,65,mbpp_267_square_Sum,0.3,13.610891819000244,True," ```
function square_Sum(n: number): number {
    let sum: number = 0;
    for (let i: number = 1; i <= n; i += 2) {
        sum += Math.pow(i, 2);
    }
    return sum;
}
```",8.81756067276001,72,71,"Counter({(1, 70): 1, (2, 1): 1})",False
True,66,mbpp_58_opposite_Signs,0.3,7.242897987365723,True," ```
function opposite_Signs(x: number, y: number): boolean {
  return (x < 0 && y > 0) || (x > 0 && y < 0);
}
```",3.980520725250244,49,49,"Counter({(1, 49): 1})",False
True,67,mbpp_103_eulerian_num,0.3,29.70928430557251,True," ```
function eulerian_num(n: number, m: number): number {
  if (m === 0) {
    return n;
  } else {
    const num1: number = n * (n - 1);
    const num2: number = (n - 1) * (n - 2);
    return num1 / num2;
  }
}
```",23.64514231681824,96,93,"Counter({(1, 90): 1, (2, 3): 1})",False
True,68,mbpp_20_is_woodall,0.3,19.90009832382202,True," ```
function is_woodall(n: number): boolean {
  const strN: number = n;
  let count: number = 0;
  while (strN > 0) {
    count++;
    strN / 10;
  }
  return count === 3 || count === 5 || count === 7;
}
```",14.02017092704773,94,85,"Counter({(1, 79): 1, (2, 5): 1, (5, 1): 1})",False
True,69,mbpp_96_divisor,0.3,14.530287504196169,True," ```
function divisor(n: number): number {
    let count: number = 0;
    for (let i: number = 1; i <= n; i++) {
        if (n % i == 0) {
            count++;
        }
    }
    return count;
}
```",9.519494771957396,76,75,"Counter({(1, 74): 1, (2, 1): 1})",False
True,70,mbpp_404_minimum,0.3,6.7998206615448,True," ```
function minimum(a: number, b: number): number {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
```",3.1589128971099854,48,48,"Counter({(1, 48): 1})",False
True,71,mbpp_752_jacobsthal_num,0.3,36.548001527786255,True," ```
function jacobsthal_num(n: number): number {
  let nums: number = 0;
  if (n === 0) {
    return 0;
  } else if (n === 1) {
    return 1;
  } else {
    for (let i: number = 2; i <= n; i++) {
      nums += Math.pow(i - 1, 2);
    }
    return nums;
  }
}
```",28.186203718185425,126,120,"Counter({(1, 115): 1, (2, 4): 1, (3, 1): 1})",False
True,72,mbpp_765_is_polite,0.3,22.27719664573669,True," ```
function is_polite(n: number): number {
    let count: number = 1;
    while (count < n) {
        if (Math.floor(n / 2) === Math.ceil(n / 3)) {
            count++;
        } else {
            count += 2;
        }
    }
    return count;
}
```",15.427236318588257,98,92,"Counter({(1, 87): 1, (2, 4): 1, (3, 1): 1})",False
True,73,mbpp_801_test_three_equal,0.3,22.18349885940552,True," ```
function test_three_equal(x: number, y: number, z: number): number {
	if (x === y && x === z) {
		return 3;
	} else if (y === z) {
		return 2;
	} else if (x === y || x === z || y === z) {
		return 1;
	} else {
		return 0;
	}
}
```",14.925898551940918,106,106,"Counter({(1, 106): 1})",False
