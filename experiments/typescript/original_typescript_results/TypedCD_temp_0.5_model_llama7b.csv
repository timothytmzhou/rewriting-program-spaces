did_compile,benchmark_id,benchmark_name,temperature,execution_time,llm_finished,output,total_realizability_time,num_tokens_guessed,num_tokens_generated,tries_per_token,timed_out
True,0,mbpp_80_tetrahedral_number,0.5,15.669373512268066,True," ```
function tetrahedral_number(n: number): number {
    let result: number = 0;
    for (let i: number = 1; i <= n; i++) {
        result += (i * (i + 1)) / 2;
    }
    return result;
}
```",10.125528812408447,77,76,"Counter({(1, 75): 1, (2, 1): 1})",False
True,1,mbpp_392_get_max_sum,0.5,86.11139607429504,True," ```
function get_max_sum(n: number): number {
    if (n === 1) {
        return n;
    } else {
        const leftHalf: number = Math.floor(n / 2);
        const rightHalf: number = n - leftHalf;
        const leftSum: number = getMaxSum(leftHalf);
        const rightSum: number = getMaxSum(rightHalf);
        return Math.max(leftSum + rightSum + n);
    }
}
```",78.00809502601624,125,122,"Counter({(1, 119): 1, (2, 3): 1})",False
True,2,mbpp_171_perimeter_pentagon,0.5,17.883798837661743,True," ```
function perimeter_pentagon(sideLengths: number): number {
  const sideCount: number = 5;
  let perimeter: number = 0;
  
  for (let i: number = 0; i < sideCount; i++) {
    perimeter += sideLengths;
  }
  
  return perimeter;
}
```",12.10968255996704,93,87,"Counter({(1, 83): 1, (4, 1): 1, (2, 3): 1})",False
True,3,mbpp_127_multiply_int,0.5,3.718259811401367,True," ```
function multiply_int(x: number, y: number): number {
    return x * y;
}
```",1.5774500370025637,30,30,"Counter({(1, 30): 1})",False
True,4,mbpp_435_last_Digit,0.5,3.325531482696533,True," ```
function last_Digit(n: number): number {
    return n % 10;
}
```",1.2779674530029297,28,28,"Counter({(1, 28): 1})",False
True,5,mbpp_287_square_Sum,0.5,14.192929029464722,True," ```
function square_Sum(n: number): number {
    let result: number = 0;
    for (let i: number = 0; i < n; i++) {
        result += Math.pow((i * 2), 2);
    }
    return result;
}
```",9.51033854484558,74,72,"Counter({(1, 70): 1, (2, 2): 1})",False
True,6,mbpp_606_radian_degree,0.5,4.299591779708862,True," ```
function radian_degree(degree: number): number {
   return degree * Math.PI / 180;
}
```",1.843583345413208,36,36,"Counter({(1, 36): 1})",False
True,7,mbpp_803_is_perfect_square,0.5,14.120360374450684,True," ```
function is_perfect_square(n: number): boolean {
    let x: number = n;
    while (x * x > n) {
        x = (x + n / x) / 2;
    }
    return x * x === n;
}
```",9.40764546394348,70,69,"Counter({(1, 68): 1, (2, 1): 1})",False
True,8,mbpp_731_lateralsurface_cone,0.5,17.62583565711975,True," ```
function lateralsurface_cone(r: number, h: number): number {
    const pi: number = Math.PI; // PI constant
    const lateralSurfaceArea: number = (1 / 3) * pi * r * r * (h + r);
    
    return lateralSurfaceArea;
}
```",12.14973258972168,84,82,"Counter({(1, 80): 1, (2, 2): 1})",False
True,9,mbpp_581_surface_Area,0.5,13.81875467300415,True," ```
function surface_Area(base: number, height: number): number {
    return (2 * Math.sqrt((Math.pow(base, 2) - (Math.pow(height, 2))))) + (2 * base);
}
```",9.833143949508669,60,60,"Counter({(1, 60): 1})",False
True,10,mbpp_135_hexagonal_num,0.5,5.09827733039856,True," ```
function hexagonal_num(n: number): number {
    return (n * (n + 1)) / 2;
}
```",2.5592966079711914,36,36,"Counter({(1, 36): 1})",False
True,11,mbpp_739_find_Index,0.5,96.06273698806764,True," ```
function find_Index(n: number): number {
    let numDigits: number = Math.floor(Math.log2(10 * (n - 1))) + 1;
    let minNum: number = 9 * Math.pow(10, numDigits - 1);
    let maxNum: number = 9 * Math.pow(10, numDigits) / 6;
    while (minNum <= maxNum) {
        if (numDigits === n && Math.sqrt((8 * minNum) + 1) % 1 === 0) {
            return minNum;
        } else {
            minNum++;
        }
    }
    return 0;
}
```",83.69934225082397,199,181,"Counter({(1, 168): 1, (2, 10): 1, (3, 2): 1, (5, 1): 1})",False
True,12,mbpp_17_square_perimeter,0.5,3.5050320625305176,True," ```
function square_perimeter(sideLength: number): number {
  return 4 * sideLength;
}
```",1.3351991176605225,29,29,"Counter({(1, 29): 1})",False
True,13,mbpp_77_is_Diff,0.5,7.07742166519165,True," ```
function is_Diff(num: number): boolean {
  if (num % 11 === 0) {
      return true;
  } else{
      return false;
  }
}
```",3.470688343048096,57,56,"Counter({(1, 55): 1, (2, 1): 1})",False
True,14,mbpp_126_sum,0.5,28.38040590286255,True," ```
function sum(num1: number, num2: number): number {
    let commonDivisors: number = 0;
    for (let i: number = 1; i <= Math.min(num1); i++) {
        if ((num1 % i) === 0 && (num2 % i) === 0) {
            commonDivisors += i;
        }
    }
    return commonDivisors;
}
```",20.923891067504883,120,112,"Counter({(1, 106): 1, (2, 4): 1, (3, 2): 1})",False
True,15,mbpp_266_lateralsurface_cube,0.5,9.8562753200531,True," ```
function lateralsurface_cube(sideLength: number): number {
    // Calculate the lateral surface area of a cube by adding up all the sides of the cube
    const totalLateralSurfaceArea: number = (4 * sideLength) * sideLength;
    
    return totalLateralSurfaceArea;
}
```",5.086629152297974,83,82,"Counter({(1, 81): 1, (2, 1): 1})",False
True,16,mbpp_797_sum_in_range,0.5,17.0507755279541,True," ```
function sum_in_range(l: number, r: number) :number{
   let sum:number =0;
   for (let i:number =l;i<=r;i++){
     if (i%2 != 0){
       sum += i;
      }
    }
    return sum;
  }
```",11.687357902526855,86,82,"Counter({(1, 79): 1, (3, 1): 1, (2, 2): 1})",False
True,17,mbpp_3_is_not_prime,0.5,20.9823157787323,True," ```
function is_not_prime(n: number): boolean {
    if (n <= 1) {
        return false;
    } else {
        for (let i: number = 2; i < n; i++) {
            if (n % i === 0) {
                return true;
            }
        }
        return false;
    }
}
```",14.90855312347412,93,91,"Counter({(1, 90): 1, (3, 1): 1})",False
True,18,mbpp_458_rectangle_area,0.5,4.169842958450317,True," ```
function rectangle_area(l: number, b: number): number {
  return l * b;
}
```",1.63671875,30,29,"Counter({(1, 28): 1, (2, 1): 1})",False
True,19,mbpp_441_surfacearea_cube,0.5,10.54448628425598,True," ```
function surfacearea_cube(sideLength: number): number {
  const squareSurfaceArea: number = sideLength * sideLength;
  const totalSurfaceArea: number = 6 * squareSurfaceArea;
  return totalSurfaceArea;
}
```",6.239210605621338,65,63,"Counter({(1, 61): 1, (2, 2): 1})",False
True,20,mbpp_162_sum_series,0.5,13.503068923950195,True," ```
function sum_series(n: number): number {
    let result: number = 0;
    for (let i: number = 0; i < n / 2; i++) {
        result += n - 2 * i;
    }
    return result;
}
```",8.451124668121338,70,70,"Counter({(1, 70): 1})",False
True,21,mbpp_448_cal_sum,0.5,6.930389881134033,True," ```
function cal_sum(n: number): number {
    let arr: number = n * (n + 1) / 2;
    return arr;
}
```",3.239489316940308,51,43,"Counter({(1, 39): 1, (2, 2): 1, (3, 1): 1, (5, 1): 1})",False
True,22,mbpp_738_geometric_sum,0.5,7.75497031211853,True," ```
function geometric_sum(n: number): number {
  if (n === 0) {
    return 0;
  } else {
    return n * geometricSum(n - 1);
  }
}
```",3.9868483543396,55,55,"Counter({(1, 55): 1})",False
True,23,mbpp_239_get_total_number_of_sequences,0.5,42.46314001083374,True," ```
function get_total_number_of_sequences(m: number, n: number): number {
	let totalCount: number = 0;
	for (let i: number = 1; i <= m; i++) {
		if (i >= 2 * (n - 1)) {
			totalCount += Math.floor((m - i) / (n - 1));
		} else if (i > n - 1) {
			totalCount++;
		}
	}
	return totalCount;
}
```",34.12071895599365,133,130,"Counter({(1, 127): 1, (2, 3): 1})",False
True,24,mbpp_59_is_octagonal,0.5,60.866759300231934,True," ```
function is_octagonal(n: number): boolean {
    const numDigits: number = Math.floor(Math.log2(n) / Math.log2(10));
    if (numDigits % 3 !== 0) {
        return false; // Not an octagonal number
    }
    let digitSum: number = 0;
    while (n > 0) {
        digitSum += n % 10;
        n = Math.floor(n / 10);
    }
    return digitSum === 9 * Math.pow(10, numDigits / 3 - 1);
}
```",50.88488411903381,161,155,"Counter({(1, 151): 1, (2, 2): 1, (3, 2): 1})",False
True,25,mbpp_638_wind_chill,0.5,51.287845849990845,True," ```
function wind_chill(windVelocityInKmPerHour: number, temperatureInCelsuis: number): number {
    const windChillFactor: number = 33.5 * Math.pow((Math.sqrt(windVelocityInKmPerHour) / 10), 2);
    const windChillTemperature: number = temperatureInCelsuis - windChillFactor;
    
    if (windChillTemperature < 16) {
        return 16;
    } else if (windChillTemperature > 40) {
        return 40;
    }
    
    return Math.ceil(windChillTemperature);
}
```",40.12482666969299,176,174,"Counter({(1, 172): 1, (2, 2): 1})",False
True,26,mbpp_577_last_Digit_Factorial,0.5,27.56183505058289,True," ```
function last_Digit_Factorial(n: number): number {
    if (n === 0) {
        return 1; // Base case: n! = 1 when n = 0
    } else {
        const fact_n_minus_1: number = last_digit_factorial(n - 1); // Recursive call
        const result: number = n * fact_n_minus_1 % 10; // Calculate the last digit of n!
        return result;
    }
}
```",19.83332371711731,125,124,"Counter({(1, 123): 1, (2, 1): 1})",False
True,27,mbpp_84_sequence,0.5,38.5038800239563,True," ```
function sequence(n: number): number {
    if (n === 1) {
        return 1;
    } else if (n === 2) {
        return 1;
    } else {
        const previousNumberOneIndexed: number = sequence(n - 1);
        const previousNumberTwoIndexed: number = sequence(n - 2);
        return previousNumberOneIndexed + previousNumberTwoIndexed;
    }
}
```",31.32856488227844,115,110,"Counter({(1, 105): 1, (2, 5): 1})",False
True,28,mbpp_724_power_base_sum,0.5,14.536571025848389,True," ```
function power_base_sum(base: number, power: number): number {
  let result: number = 0;
  while (power > 0) {
    result += Math.pow(base, power % 10);
    power / 10;
  }
  return result;
}
```",9.522465705871582,77,75,"Counter({(1, 73): 1, (2, 2): 1})",False
True,29,mbpp_641_is_nonagonal,0.5,17.97673463821411,True," ```
function is_nonagonal(n: number): boolean {
    const numDigits: number = Math.floor(Math.log2(n) / Math.log2(10));
    if (numDigits % 3 === 0 && numDigits !== 0) {
        return true;
    } else {
        return false;
    }
}
```",11.88964867591858,95,90,"Counter({(1, 86): 1, (2, 3): 1, (3, 1): 1})",False
True,30,mbpp_279_is_num_decagonal,0.5,106.26117730140686,True," ```
function is_num_decagonal(n: number): boolean {
    if (n < 1) {
        return false;
    } else if (n === 1) {
        return true;
    } else {
        const num_digits: number = Math.floor(Math.log2(n)) / Math.log2(10);
        const first_digit: number = Math.pow(10, num_digits - 1);
        const last_digit: number = n % 10;
        return ((first_digit * 9) + (last_digit * 8)) === n;
    }
}
```",96.36684322357178,160,155,"Counter({(1, 151): 1, (2, 3): 1, (3, 1): 1})",False
True,31,mbpp_72_dif_Square,0.5,132.74603009223938,True," ```
function dif_Square(n: number): boolean {
    const maxSideLength: number = Math.sqrt(n);
    let i: number = 1;
    
    while (i <= maxSideLength) {
        const squareOne: number = i * i;
        
        if (squareOne === n) {
            return true;
        } else if (squareOne > n) {
            return false;
        }
        
        const squareTwo: number = (maxSideLength - i) * (maxSideLength - i);
        
        if (squareTwo === n) {
            return true;
        }
        
        i++;
    }
    
    return false;
}
```",121.75395011901855,176,172,"Counter({(1, 168): 1, (2, 4): 1})",False
True,32,mbpp_781_count_divisors,0.5,16.479979276657104,True," ```
function count_divisors(n: number): boolean {
   let count: number = 0;
   for (let i: number = 1; i <= n; i++) {
      if (n % i === 0) {
         count++;
      }
   }
   return count % 2 == 0;
}
```",10.956923484802246,84,83,"Counter({(1, 82): 1, (2, 1): 1})",False
True,33,mbpp_309_maximum,0.5,4.265975475311279,True," ```
function maximum(a: number, b: number): number {
return a > b ? a : b;
}
```",1.7587227821350098,31,31,"Counter({(1, 31): 1})",False
True,34,mbpp_295_sum_div,0.5,15.936609745025637,True," ```
function sum_div(n: number): number {
let divSum: number = 0;
for (let i: number = 1; i <= n / 2; i++) {
if (n % i === 0) {
divSum += i;
}
}
return divSum;
}
```",10.93050479888916,79,76,"Counter({(1, 74): 1, (2, 1): 1, (3, 1): 1})",False
True,35,mbpp_14_find_Volume,0.5,9.483301401138306,True," ```
function find_Volume(l: number, b: number, h: number): number {
    const areaOfBase: number = l * b;
    return (areaOfBase * h) / 3;
}
```",5.57016396522522,56,54,"Counter({(1, 52): 1, (2, 2): 1})",False
True,36,mbpp_167_next_power_of_2,0.5,8.903203010559082,True," ```
function next_power_of_2(n: number): number {
    let pow: number = 1;

    while (pow < n) {
        pow *= 2;
    }

    return pow;
}
```",5.166226625442505,58,57,"Counter({(1, 56): 1, (2, 1): 1})",False
True,37,mbpp_600_is_Even,0.5,3.751167535781861,True," ```
function is_Even(n: number): boolean {
   return n % 2 === 0;
}
```",1.4722471237182615,30,30,"Counter({(1, 30): 1})",False
True,38,mbpp_742_area_tetrahedron,0.5,7.879570722579956,True," ```
function area_tetrahedron(side: number): number {
    const sqrt3: number = Math.sqrt(3);
    return (sqrt3 * side) / 2;
}
```",4.382278680801392,52,50,"Counter({(1, 48): 1, (2, 2): 1})",False
True,39,mbpp_432_median_trapezium,0.5,12.816988229751589,True," ```
function median_trapezium(base1: number, base2: number, height: number): number {
    const halfBaseDiff: number = (base1 - base2) / 2;
    return Math.sqrt(halfBaseDiff * halfBaseDiff + height * height);
}
```",8.057644844055176,71,69,"Counter({(1, 67): 1, (2, 2): 1})",False
True,40,mbpp_234_volume_cube,0.5,4.297410488128662,True," ```
function volume_cube(sideLength: number): number {
  return sideLength * sideLength * sideLength;
}
```",1.5884146690368652,33,32,"Counter({(1, 31): 1, (2, 1): 1})",False
True,41,mbpp_422_find_Average_Of_Cube,0.5,14.364940881729126,True," ```
function find_Average_Of_Cube(n: number): number {
    let total: number = 0;
    for (let i: number = 1; i <= n; i++) {
        total += Math.pow(i, 3);
    }
    return total / n;
}
```",9.066750526428224,79,77,"Counter({(1, 75): 1, (2, 2): 1})",False
True,42,mbpp_292_find,0.5,5.003772735595703,True," ```
function find(numerator: number, denominator: number) :number{
return Math.floor(numerator /denominator);
}
```",2.277381896972656,41,40,"Counter({(1, 39): 1, (2, 1): 1})",False
True,43,mbpp_389_find_lucas,0.5,40.11321711540222,True," ```
function find_lucas(n: number): number {
    if (n === 2) {
        return 1;
    } else if (n === 1 || n === 0) {
        return 2;
    } else {
        const previousTwoNumbers: number = findLucas(n - 2);
        const previousNumber: number = findLucas(n - 1);
        return previousTwoNumbers + previousNumber;
    }
}
```",32.7774670124054,118,114,"Counter({(1, 110): 1, (2, 4): 1})",False
True,44,mbpp_227_min_of_three,0.5,14.048331260681152,True," ```
function min_of_three(a: number, b: number, c: number): number {
    if (a < b && a < c) {
        return a;
    } else if (b < a && b < c) {
        return b;
    } else {
        return c;
    }
}
```",8.683566331863403,80,80,"Counter({(1, 80): 1})",False
True,45,mbpp_388_highest_Power_of_2,0.5,9.594060897827148,True," ```
function highest_Power_of_2 (n: number): number {
   let i: number = 1;
   while (i <= n) {
      i *= 2;
   }
   return i / 2;
}
```",5.5292017459869385,61,58,"Counter({(1, 56): 1, (2, 1): 1, (3, 1): 1})",False
True,46,mbpp_271_even_Power_Sum,0.5,18.47885775566101,True," ```
function even_Power_Sum(n: number): number {
    let sum: number = 0;
    for (let i: number = 0; i < n; i++) {
        if (i % 2 === 0) {
            sum += Math.pow(i, 5);
        }
    }
    return sum;
}
```",12.877119779586792,88,87,"Counter({(1, 86): 1, (2, 1): 1})",False
False,47,mbpp_67_bell_number,0.5,156.14536046981812,False," ```
function bell_number(n: number): number {
    if (n === 0) {
        return 1;
    } else {
        let previousRowSum: number = 0;
        const currentRowSum: number = n * bellNumber(n - 1);
        for (let i: number = 2; i <= Math.floor((n / 2)); i++) {
            previousRowSum += currentRowSum;
            currentRowSum = nearest",132.27592301368713,400,107,"Counter({(1, 102): 1, (2, 5): 1})",True
True,48,mbpp_274_even_binomial_Coeff_Sum,0.5,16.649875164031982,True," ```
function even_binomial_Coeff_Sum(n: number): number {
    let result: number = 0;
    for (let i: number = 2; i <= n; i += 1) {
        result += Math.pow((Math.pow(i, 2)), 2);
    }
    return result;
}
```",11.30475902557373,87,84,"Counter({(1, 81): 1, (2, 3): 1})",False
True,49,mbpp_86_centered_hexagonal_number,0.5,12.328663110733032,True," ```
function centered_hexagonal_number(n: number): number {
  let num: number = (4 * n) - 2;
  while (num % 2 === 0) {
      num / 2;
  }
  return num;
}
```",7.968721151351929,69,67,"Counter({(1, 65): 1, (2, 2): 1})",False
True,50,mbpp_574_surfacearea_cylinder,0.5,17.35588240623474,True," ```
function surfacearea_cylinder (radius: number, height: number): number {
    // Calculate the surface area of a cylinder by adding its circular base and curved sides
    let surfaceAreaBaseCircle: number = Math.pow (Math.PI * radius, 2);
    let surfaceAreaCurvedSide: number = Math.PI * radius * height;
    
    // Return the total surface area of the cylinder
    return surfaceAreaBaseCircle + surfaceAreaCurvedSide;
}
```",10.285682201385498,122,118,"Counter({(1, 115): 1, (2, 2): 1, (3, 1): 1})",False
True,51,mbpp_430_parabola_directrix,0.5,5.760104656219482,True," ```
function parabola_directrix(a: number, b: number, c: number): number {
return (b / (2 * a));
}
```",2.886068820953369,44,40,"Counter({(1, 38): 1, (4, 1): 1, (2, 1): 1})",False
True,52,mbpp_406_find_Parity,0.5,3.975475549697876,True," ```
function find_Parity(x: number): boolean {
return x % 2 === 0;
}
```",1.6536140441894531,30,30,"Counter({(1, 30): 1})",False
True,53,mbpp_605_prime_num,0.5,24.49431943893433,True," ```
function prime_num(num: number): boolean {
	if (num < 2) {
		return false;
	} else {
		for (let i: number = 2; i <= Math.sqrt(num); i++) {
			if (num % i === 0) {
				return false;
			}
		}
	}
	return true;
}
```",17.89273500442505,105,103,"Counter({(1, 102): 1, (3, 1): 1})",False
True,54,mbpp_264_dog_age,0.5,14.9672691822052,True," ```
function dog_age(human_age: number): number {
    // A human year is equivalent to 7 dog years
    const DOG_YEARS_PER_HUMAN_YEAR: number = 7;

    // Calculate the dog years based on the human age
    let dog_years: number = human_age * DOG_YEARS_PER_HUMAN_YEAR;

    // Return the calculated dog years
    return dog_years;
}
```",7.938565254211426,120,119,"Counter({(1, 118): 1, (2, 1): 1})",False
True,55,mbpp_770_odd_num_sum,0.5,13.8896164894104,True," ```
function odd_num_sum(n: number): number {
    let result: number = 0;
    for (let i: number = 1; i <= n; i += 2) {
        result += Math.pow(i, 4);
    }
    return result;
}
```",9.049216985702516,75,74,"Counter({(1, 73): 1, (2, 1): 1})",False
True,56,mbpp_453_sumofFactors,0.5,16.242186784744263,True," ```
function sumofFactors(n: number): number {
    let sum: number = 0;
    for (let i: number = 2; i <= n / 2; i++) {
        if (n % i === 0) {
            sum += i;
        }
    }
    return sum;
}
```",10.952327489852903,84,83,"Counter({(1, 82): 1, (2, 1): 1})",False
True,57,mbpp_244_next_Perfect_Square,0.5,10.422501802444458,True," ```
function next_Perfect_Square(n: number): number {
	let i: number = n+1;
	while (i*i <= n) {
		i++;
	}
	return i*i;
}
```",6.519758224487305,61,59,"Counter({(1, 57): 1, (2, 2): 1})",False
True,58,mbpp_93_power,0.5,12.267008066177368,True," ```
function power(a: number, b: number): number {
    let result: number = 1;
    while (b > 0) {
        result *= a;
        b-1;
    }
    return result;
}
```",7.781219244003296,70,62,"Counter({(1, 58): 1, (2, 2): 1, (4, 2): 1})",False
False,59,mbpp_291_count_no_of_ways,0.5,155.4306890964508,False," ```
function count_no_of_ways(n: number, k: number): number {
    const dp: number = (1) * Math.pow(k, n);
    let i: number = 0;
    while (i < n - 1) {
        if ((i % 3 === 0 && i / 3 !== n) || (i % 4 === 0 && i / 4 !== n)) {
            dp == 0;
            i++;
        } else {
            dp == d ***",132.00503945350647,400,124,"Counter({(1, 113): 1, (2, 4): 1, (3, 2): 1, (6, 1): 1, (4, 3): 1, (124, 1): 1})",True
True,60,mbpp_637_noprofit_noloss,0.5,4.176257133483887,True," ```
function noprofit_noloss(actualCost: number, saleAmount: number): boolean {
    return actualCost === saleAmount;
}
```",1.594090700149536,39,38,"Counter({(1, 37): 1, (2, 1): 1})",False
True,61,mbpp_293_otherside_rightangle,0.5,5.181202173233032,True," ```
function otherside_rightangle(w: number, h: number): number {
    return Math.sqrt(w * w + h * h);
}
```",2.451829671859741,40,40,"Counter({(1, 40): 1})",False
True,62,mbpp_592_sum_Of_product,0.5,15.436485052108765,True," ```
function sum_Of_product(n: number): number{
let result: number = 0;
for ( let i:number=1 ;i<= n; i++){
result += Math.pow(2 ,i) * Math.pow(3 ,i);
}
return result;}
```",10.42615795135498,78,70,"Counter({(1, 65): 1, (3, 3): 1, (2, 2): 1})",False
False,63,mbpp_256_count_Primes_nums,0.5,160.33368062973022,False," ```
function count_Primes_nums(n: number): number {
    let numOfPrimeNums: number = 0;
    if (n <= 2) {
        return 0;
    } else {
        const isComposite: boolean = false;
        const primes: number = n - 1;
        for (let i: number = 2; i < Math.sqrt(primes); i++) {
            if (isComposite) {
                return numOfPrimeNums;
            } else {
                for (let j: number = i * i; j < primes; j += i) {
                    isComposite ? update",138.53642630577087,400,159,"Counter({(1, 148): 1, (2, 7): 1, (4, 2): 1, (3, 1): 1, (6, 1): 1})",True
True,64,mbpp_479_first_Digit,0.5,7.800580263137817,True," ```
function first_Digit(n: number): number{
return Math.floor(Math.log2(Math.pow(10, n)) / Math.log2(10));
}
```",4.383655548095703,52,48,"Counter({(1, 45): 1, (3, 1): 1, (2, 2): 1})",False
True,65,mbpp_267_square_Sum,0.5,13.865283966064451,True," ```
function square_Sum(n: number): number {
    let result: number = 0;
    for (let i: number = 1; i <= n; i += 2) {
        result += Math.pow(i, 2);
    }
    return result;
}
```",9.055693626403809,73,71,"Counter({(1, 69): 1, (2, 2): 1})",False
True,66,mbpp_58_opposite_Signs,0.5,8.540304183959961,True," ```
function opposite_Signs(x: number, y: number): boolean {
return ((x < 0 && y > 0) || (x > 0 && y < 0));
}
```",5.195330858230591,48,48,"Counter({(1, 48): 1})",False
True,67,mbpp_103_eulerian_num,0.5,21.305588960647583,True," ```
function eulerian_num(n: number, m: number): number {
  let result: number = 0;
  if (m === n) {
    result += 1;
  } else if (m < n && m > 0) {
    result += Math.floor((n * (n - 1)) / 2);
  }
  return result;
}
```",15.21192502975464,97,94,"Counter({(1, 91): 1, (2, 3): 1})",False
True,68,mbpp_20_is_woodall,0.5,5.422978401184082,True," ```
function is_woodall(n: number): boolean {
return (n % 2 === 0) && (n > 1);
}
```",2.7414662837982178,39,38,"Counter({(1, 37): 1, (2, 1): 1})",False
True,69,mbpp_96_divisor,0.5,4.795820951461792,True," ```
function divisor(n:number):number{
return n>1?n+divisor(n-1):0;}
```",2.315625190734864,34,34,"Counter({(1, 34): 1})",False
True,70,mbpp_404_minimum,0.5,6.332104921340942,True," ```
function minimum(a: number, b: number): number {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
```",3.2227258682250977,48,48,"Counter({(1, 48): 1})",False
True,71,mbpp_752_jacobsthal_num,0.5,26.78728485107422,True," ```
function jacobsthal_num(n: number): number {
  let x: number = 0;
  if (n === 0) {
    return x;
  } else {
    for (let i: number = 0; i < n - 1; i++) {
      x += Math.pow(x * x - 1, 2);
    }
    return x;
  }
}
```",19.554304361343384,105,103,"Counter({(1, 101): 1, (2, 2): 1})",False
True,72,mbpp_765_is_polite,0.5,35.08077621459961,True," ```
function is_polite(n: number): number {
    let count: number = 1;
    while (count < n) {
        if (Math.floor(n / 2) === Math.ceil(n / 2)) {
            count++;
        } else if (n % 3 !== 0 && n % 5 !== 0) {
            count += 2;
        } else {
            count++;
        }
    }
    return count;
}
```",26.29454588890076,125,119,"Counter({(1, 114): 1, (2, 4): 1, (3, 1): 1})",False
True,73,mbpp_801_test_three_equal,0.5,21.320013761520386,True," ```
function test_three_equal(x: number, y: number, z: number): number {
    let count: number = 0;
    if (x === y && x === z) {
        count++;
    }
    if (y === z && y !== x) {
        count++;
    }
    if (z === x && z !== y) {
        count++;
    }
    return count;
}
```",14.87038278579712,104,102,"Counter({(1, 100): 1, (2, 2): 1})",False
