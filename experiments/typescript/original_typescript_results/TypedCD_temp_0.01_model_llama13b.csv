did_compile,benchmark_id,benchmark_name,temperature,execution_time,llm_finished,output,total_realizability_time,num_tokens_guessed,num_tokens_generated,tries_per_token,timed_out
True,0,mbpp_80_tetrahedral_number,0.01,24.0465567111969,True," ```
function tetrahedral_number(n: number): number {
    let result: number = 0;
    
    if (n === 1) {
        result = 1;
    } else {
        const previousNumber: number = tetrahedral_number(n - 1);
        result = previousNumber * 2 + 1;
    }
    
    return result;
}
```",16.0243399143219,100,99,"Counter({(1, 98): 1, (2, 1): 1})",False
False,1,mbpp_392_get_max_sum,0.01,168.08012342453003,False," ```
function get_max_sum(n: number): number {
	if (n <= 0) {
		return 0;
	} else if (n === 1 || n === 2 || n === 3 || n === 4 || n === 5) {
		return n;
	} else {
		const halfNums: number = Math.floor(n / 2);
		const thirdNums: number = Math.floor(n / 3);
		const quarterNums: number = Math.floor(n / 4);
		const fifthNums: number = Math.floor(nes",137.3507902622223,400,145,"Counter({(1, 141): 1, (2, 3): 1, (3, 1): 1})",True
True,2,mbpp_171_perimeter_pentagon,0.01,4.426180601119995,True," ```
function perimeter_pentagon(sideLength: number) :number{
return sideLength *5;}
```",1.307210922241211,28,28,"Counter({(1, 28): 1})",False
True,3,mbpp_127_multiply_int,0.01,4.733169794082642,True," ```
function multiply_int(x: number, y: number): number {
    return x * y;
}
```",1.5404231548309326,30,30,"Counter({(1, 30): 1})",False
True,4,mbpp_435_last_Digit,0.01,4.490086555480957,True," ```
function last_Digit(n: number): number {
    return n % 10;
}
```",1.396021842956543,28,28,"Counter({(1, 28): 1})",False
True,5,mbpp_287_square_Sum,0.01,16.24482488632202,True," ```
function square_Sum(n: number): number {
    let result: number = 0;
    
    for (let i: number = 1; i <= n; i += 2) {
        result += Math.pow(i, 2);
    }
    
    return result;
}
```",9.849963665008543,77,76,"Counter({(1, 75): 1, (2, 1): 1})",False
True,6,mbpp_606_radian_degree,0.01,8.277513027191162,True," ```
function radian_degree(degree: number): number {
    const PI: number = Math.PI;
    return degree * (PI / 180);
}
```",3.834890365600586,48,47,"Counter({(1, 46): 1, (2, 1): 1})",False
True,7,mbpp_803_is_perfect_square,0.01,13.757034540176392,True," ```
function is_perfect_square(n: number): boolean {
    let sqrtN: number = Math.sqrt(n);
    if (Math.pow(sqrtN, 2) === n) {
        return true;
    } else {
        return false;
    }
}
```",7.17218804359436,75,73,"Counter({(1, 71): 1, (2, 2): 1})",False
True,8,mbpp_731_lateralsurface_cone,0.01,65.00530195236206,True," ```
function lateralsurface_cone(r: number, h: number): number {
    const baseArea: number = Math.PI * (r * r); // Area of the circular base
    const slantHeight: number = Math.sqrt((h*h) + (r*r)); // Slant height from the center of the circle to the top of the cone
    const sideArea: number = baseArea * slantHeight; // Side area of the triangle formed by the base and the slant height
    
    return 2 * (baseArea + sideArea); // Total lateral surface area is twice the sum of the base area and the side area
}
```",52.901989459991455,157,152,"Counter({(1, 148): 1, (2, 3): 1, (3, 1): 1})",False
True,9,mbpp_581_surface_Area,0.01,12.670923948287964,True," ```
function surface_Area(baseEdge: number, height: number): number {
    const sideLength: number = Math.sqrt((height * height) / (12));
    return (4 * sideLength * baseEdge);
}
```",7.506228923797607,58,57,"Counter({(1, 56): 1, (2, 1): 1})",False
True,10,mbpp_135_hexagonal_num,0.01,6.857370615005493,True," ```
function hexagonal_num(n: number) :number{
return (2*n-1)*(2*n-3)/4;}
```",3.0638484954833984,38,37,"Counter({(1, 36): 1, (2, 1): 1})",False
True,11,mbpp_739_find_Index,0.01,43.29107546806336,True," ```
function find_Index(n: number): number {
    let i: number = 1;
    while (i < Math.pow(10, n)) {
        if ((Math.floor((Math.sqrt(8 * i + 1) - 1) / 2)) === i) {
            return i;
        } else {
            i++;
        }
    }
    return 0; // If no such index exists
}
```",33.81007552146912,115,108,"Counter({(1, 104): 1, (2, 2): 1, (3, 1): 1, (4, 1): 1})",False
True,12,mbpp_17_square_perimeter,0.01,5.055736064910889,True," ```
function square_perimeter(sideLength: number) :number{
return (4*sideLength);
}
```",1.8449392318725584,30,29,"Counter({(1, 28): 1, (2, 1): 1})",False
True,13,mbpp_77_is_Diff,0.01,5.62956690788269,True," ```
function is_Diff(n: number): boolean {
    return n % 11 === 0;
}
```",1.944617748260498,36,36,"Counter({(1, 36): 1})",False
True,14,mbpp_126_sum,0.01,29.068732261657715,True," ```
function sum(a: number, b: number): number {
    let result: number = 0;
    
    // Iterate through all possible divisors from 1 to min(a, b)
    for (let i: number = 1; i <= Math.min(a); i++) {
        if ((a % i === 0 && b % i === 0)) {
            result += i;
        }
    }
    
    return result;
}
```",19.646785259246823,120,118,"Counter({(1, 116): 1, (2, 2): 1})",False
True,15,mbpp_266_lateralsurface_cube,0.01,22.88729763031006,True," ```
function lateralsurface_cube(l: number): number {
    const sidelength: number = Math.pow(l, 2);
    const perimeter: number = (4 * sidelength) / 3;
    const area: number = perimeter * sidelength;
    
    return area;
}
```",16.029334545135498,83,81,"Counter({(1, 79): 1, (2, 2): 1})",False
True,16,mbpp_797_sum_in_range,0.01,21.951415061950684,True," ```
function sum_in_range(l: number, r: number): number {
    let result: number = 0;
    
    // Iterate over each number between l and r (both inclusive)
    for (let i: number = l; i <= r; i++) {
        if (i % 2 === 1) {
            result += i;
        }
    }
    
    return result;
}
```",13.62657904624939,105,104,"Counter({(1, 103): 1, (2, 1): 1})",False
True,17,mbpp_3_is_not_prime,0.01,56.28845691680908,True," ```
function is_not_prime(n: number): boolean {
    if (n <= 1) {
        return true;
    } else if (n === 2 || n === 3) {
        return false;
    } else {
        let i: number = 5;
        while (i * i <= n) {
            if (n % i == 0 || n % (i + 2) == 0) {
                return true;
            }
            i += 6;
        }
        return false;
    }
}
```",45.65337061882019,134,133,"Counter({(1, 132): 1, (2, 1): 1})",False
True,18,mbpp_458_rectangle_area,0.01,4.852226495742798,True," ```
function rectangle_area(length: number, breadth: number) :number{
return length * breadth;}
```",1.657402515411377,29,29,"Counter({(1, 29): 1})",False
True,19,mbpp_441_surfacearea_cube,0.01,4.312592029571533,True," ```
function surfacearea_cube(length: number) :number{
return length * length *6;}
```",1.3133187294006348,27,27,"Counter({(1, 27): 1})",False
True,20,mbpp_162_sum_series,0.01,19.29430627822876,True," ```
function sum_series(n: number): number {
    let result: number = 0;
    
    for (let i: number = 0; i <= Math.floor((n / 2)); i++) {
        result += (n - 2 * i);
    }
    
    return result;
}
```",12.19143795967102,80,79,"Counter({(1, 78): 1, (2, 1): 1})",False
True,21,mbpp_448_cal_sum,0.01,112.89078283309937,True," ```
function cal_sum(n: number): number {
    let result: number = 0;
    
    if (n === 1) {
        result += n;
    } else {
        const previousResult: number = cal_sum(n - 1);
        
        // Calculate the current Perrin number
        const currentPerrinNumber: number = Math.pow((2 * n), 3) / ((n % 2 == 0 ? 4 : 6) * Math.sqrt(Math.pow(n, 3)));
        
        // Add the current Perrin number to the total
        result += currentPerrinNumber;
        
        // Recursively call the function on the next term
        result += cal_sum(previousResult);
    }
    
    return result;
}
```",97.66503572463988,195,193,"Counter({(1, 191): 1, (2, 2): 1})",False
True,22,mbpp_738_geometric_sum,0.01,12.549161195755005,True," ```
function geometric_sum(n: number) :number{
if (n === 0){return 0;}
else if (n===1){return 1;}
else{return geometricSum(n - 1)+geometricSum(n -2);}}
```",6.657340288162232,62,62,"Counter({(1, 62): 1})",False
False,23,mbpp_239_get_total_number_of_sequences,0.01,166.5576708316803,False," ```
function get_total_number_of_sequences(m: number, n: number): number {
    if (n === 1) {
        return Math.floor((m - 2) / 3);
    } else {
        let totalSequences: number = 0;
        for (let i: number = 2; i <= m; i++) {
            const numSequences: number = Math.min(i * (i - 1) / 2 - 1 + (n - 2) * (i - 1) / 2 - 1 + 1 + (m - i) * (m - i - 1) / 2 - 1;`",135.6178104877472,400,158,"Counter({(1, 142): 1, (2, 15): 1, (3, 1): 1})",True
True,24,mbpp_59_is_octagonal,0.01,6.601671457290649,True," ```
function is_octagonal(n: number) :number{
return (Math.sqrt((8*n)+1))-1;}
```",2.9390978813171387,36,35,"Counter({(1, 34): 1, (2, 1): 1})",False
True,25,mbpp_638_wind_chill,0.01,39.54984641075134,True," ```
function wind_chill(windSpeedKmH: number, tempCelsius: number) :number{
let result: number = Math.floor((35.74+0.6215*tempCelsius-35.75*(Math.pow(windSpeedKmH,0.16))+0.4275*tempCelsius*(Math.pow(windSpeedKmH,0.16))) * 10)/10;
return result;}
```",29.438953161239624,125,122,"Counter({(1, 120): 1, (3, 1): 1, (2, 1): 1})",False
True,26,mbpp_577_last_Digit_Factorial,0.01,17.32854676246643,True," ```
function last_Digit_Factorial(n: number): number {
    let result: number = n % 10;
    
    while (n > 1) {
        n *= (n - 1);
        result = n % 10;
    }
    
    return result;
}
```",10.253010511398315,84,80,"Counter({(1, 77): 1, (2, 2): 1, (3, 1): 1})",False
True,27,mbpp_84_sequence,0.01,99.87971210479736,True," ```
function sequence(n: number): number {
    if (n <= 0) {
        return 1;
    } else if (n === 1 || n === 2) {
        return n;
    } else {
        let previousNumber1: number = 1;
        let previousNumber2: number = 1;
        
        for (let i: number = 3; i <= n; i++) {
            const currentNumber: number = previousNumber1 + previousNumber2;
            
            previousNumber1 = previousNumber2;
            previousNumber2 = currentNumber;
        }
        
        return previousNumber2;
    }
}
```",87.16579484939575,164,157,"Counter({(1, 152): 1, (2, 4): 1, (4, 1): 1})",False
True,28,mbpp_724_power_base_sum,0.01,15.485296726226808,True," ```
function power_base_sum(base: number, power: number): number {
    let result: number = 0;
    
    while (power > 0) {
        result += Math.pow(base, power);
        power++;
    }
    
    return result;
}
```",9.02001929283142,75,71,"Counter({(1, 69): 1, (2, 1): 1, (4, 1): 1})",False
True,29,mbpp_641_is_nonagonal,0.01,9.63576626777649,True," ```
function is_nonagonal(n: number) :number{
return (Math.pow((3*n)-2,(1/3))+1)/2;}
```",5.500951051712036,42,41,"Counter({(1, 40): 1, (2, 1): 1})",False
True,30,mbpp_279_is_num_decagonal,0.01,79.11723017692566,True," ```
function is_num_decagonal(n: number): number {
    let result: number = 0;
    
    if (n <= 1) {
        result = n;
    } else {
        const nums: number = Math.floor((Math.sqrt(8 * n + 1) - 1) / 2);
        
        if ((nums % 2 === 0 && nums >= n) || (nums % 2 !== 0 && nums > n)) {
            result = nums;
        } else {
            result = nums - 1;
        }
    }
    
    return result;
}
```",66.61145782470703,163,159,"Counter({(1, 156): 1, (2, 2): 1, (3, 1): 1})",False
True,31,mbpp_72_dif_Square,0.01,13.129945755004885,True," ```
function dif_Square(n: number): boolean {
    let sqrtN: number = Math.sqrt(n);
    
    if (Math.floor(sqrtN) === sqrtN) {
        return true;
    } else {
        return false;
    }
}
```",6.751946210861206,76,74,"Counter({(1, 72): 1, (2, 2): 1})",False
True,32,mbpp_781_count_divisors,0.01,94.24652576446532,True," ```
function count_divisors(n: number) :boolean{
let i:number =0;
while (i <= n){
if (n % i === 0){
countDivisors(n);
return true;
}else if (i > n / 2){
return false;
} else {
i++;
}
}
return false;
}
```",64.51552700996399,388,90,"Counter({(1, 84): 1, (3, 1): 1, (6, 1): 1, (280, 1): 1, (8, 1): 1, (2, 1): 1, (5, 1): 1})",False
True,33,mbpp_309_maximum,0.01,7.885210275650024,True," ```
function maximum(a: number, b: number): number {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}
```",3.395624876022339,48,48,"Counter({(1, 48): 1})",False
True,34,mbpp_295_sum_div,0.01,13.149783372879028,True," ```
function sum_div(n: number) : number{
return n === 1 ? 0 : (sumDivisors(Math.floor(n / 2)) + sumDivisors((n+1)/2));
}
```",7.908581733703613,59,58,"Counter({(1, 57): 1, (2, 1): 1})",False
True,35,mbpp_14_find_Volume,0.01,7.59102201461792,True," ```
function find_Volume(l: number, b: number, h: number): number {
    return (1 / 3) * l * b * h;
}
```",3.4682705402374268,43,43,"Counter({(1, 43): 1})",False
True,36,mbpp_167_next_power_of_2,0.01,7.12423849105835,True," ```
function next_power_of_2(n: number) :number{
return Math.pow(2,Math.ceil(Math.log2(n)));
}
```",3.143101453781128,41,40,"Counter({(1, 39): 1, (2, 1): 1})",False
True,37,mbpp_600_is_Even,0.01,8.13950514793396,True," ```
function is_Even(n: number): boolean {
    if (n % 2 === 0) {
        return true;
    } else {
        return false;
    }
}
```",3.379879951477051,50,50,"Counter({(1, 50): 1})",False
True,38,mbpp_742_area_tetrahedron,0.01,43.260096311569214,True," ```
function area_tetrahedron(side: number): number {
    const height: number = Math.sqrt((3 * side * side) / (2 * 1));
    const baseArea: number = (Math.pow(height, 2)) / (4 * Math.sqrt(3));
    const totalArea: number = baseArea * 4;
    
    return totalArea;
}
```",34.98996663093567,103,96,"Counter({(1, 93): 1, (2, 1): 1, (3, 1): 1, (5, 1): 1})",False
True,39,mbpp_432_median_trapezium,0.01,27.13403272628784,True," ```
function median_trapezium(base1: number, base2: number, height: number): number {
    const perimeter: number = (base1 + base2) * 2;
    const area: number = ((base1 + base2) / 2) * height;
    return Math.sqrt((perimeter * perimeter - 4 * area));
}
```",19.750409603118896,91,89,"Counter({(1, 87): 1, (2, 2): 1})",False
True,40,mbpp_234_volume_cube,0.01,5.260664701461792,True," ```
function volume_cube(l: number): number {
    return Math.pow(l, 3);
}
```",1.9003145694732664,32,32,"Counter({(1, 32): 1})",False
True,41,mbpp_422_find_Average_Of_Cube,0.01,16.347115993499756,True," ```
function find_Average_Of_Cube(n: number): number {
    let total: number = 0;
    for (let i: number = 1; i <= n; i++) {
        total += Math.pow(i, 3);
    }
    return total / n;
}
```",9.79984712600708,78,77,"Counter({(1, 76): 1, (2, 1): 1})",False
True,42,mbpp_292_find,0.01,5.337443590164185,True," ```
function find(n: number, m: number): number {
    return Math.floor(n / m);
}
```",1.955701351165772,32,32,"Counter({(1, 32): 1})",False
True,43,mbpp_389_find_lucas,0.01,16.2570378780365,True," ```
function find_lucas(n: number) :number{
return (Math.pow((1+ Math.sqrt(5)) /2 ,n)-Math.pow((1- Math.sqrt(5)) /2 ,n));
}
```",11.129284143447876,58,58,"Counter({(1, 58): 1})",False
True,44,mbpp_227_min_of_three,0.01,15.659133672714232,True," ```
function min_of_three(a: number, b: number, c: number): number {
    if (a < b && a < c) {
        return a;
    } else if (b < a && b < c) {
        return b;
    } else {
        return c;
    }
}
```",9.019885301589966,80,80,"Counter({(1, 80): 1})",False
True,45,mbpp_388_highest_Power_of_2,0.01,10.304994821548462,True," ```
function highest_Power_of_2(n: number) :number{
let i:number=1;
while (i<=n){
i*=2;
}
return i-1;
}
```",5.3834755420684814,55,53,"Counter({(1, 52): 1, (3, 1): 1})",False
True,46,mbpp_271_even_Power_Sum,0.01,34.13485908508301,True," ```
function even_Power_Sum(n: number): number {
    let result: number = 0;
    
    // Iterate from 2 to n
    for (let i: number = 2; i <= n; i += 1) {
        // Calculate the current term as the ith even number raised to the fifth power
        const term: number = Math.pow(i * 2, 5);
        
        // Add the current term to the running total
        result += term;
    }
    
    return result;
}
```",23.83622646331787,133,132,"Counter({(1, 131): 1, (2, 1): 1})",False
True,47,mbpp_67_bell_number,0.01,16.579169273376465,True," ```
function bell_number(n: number) : number{
let result: number = 0;
for (let i: number = 1; i <= n; i++) {
result += Math.pow((i - 1), n);
}
return result;
}
```",10.21955180168152,74,66,"Counter({(1, 60): 1, (2, 4): 1, (3, 2): 1})",False
True,48,mbpp_274_even_binomial_Coeff_Sum,0.01,21.945507049560547,True," ```
function even_binomial_Coeff_Sum(n: number) :number{
let result:number=0;
for (let i:number =1 ;i<=n;i+=2){
result+=(Math.pow((1+i),n)/(i*i));
}
return result;
}
```",14.88336968421936,83,76,"Counter({(1, 71): 1, (2, 3): 1, (3, 2): 1})",False
True,49,mbpp_86_centered_hexagonal_number,0.01,7.35672664642334,True," ```
function centered_hexagonal_number(n: number) : number{
return (2*n-1)*(2*n-3)/4;}
```",3.03944993019104,41,39,"Counter({(1, 37): 1, (2, 2): 1})",False
True,50,mbpp_574_surfacearea_cylinder,0.01,10.40443205833435,True," ```
function surfacearea_cylinder(radius: number, height: number) :number{
return (2 * Math.PI * radius * height)+(2*Math.PI*(radius*radius));
}
```",5.131013631820679,54,50,"Counter({(1, 49): 1, (5, 1): 1})",False
False,51,mbpp_430_parabola_directrix,0.01,168.19082880020142,False," ```
function parabola_directrix(a: number, b: number, c: number): number {
    const vertex_x: number = (4 * a) / (b * b);
    const vertex_y: number = ((2 * b * c) - (b * b)) / (4 * a);
    const focus_x: number = vertex_x - (b / (2 * a));
    const focus_y: number = vertex_y - (c / a);
    const directrix_slope: number = (focus gain",137.96505331993103,400,126,"Counter({(1, 116): 1, (2, 6): 1, (4, 3): 1, (3, 1): 1})",True
True,52,mbpp_406_find_Parity,0.01,8.16551423072815,True," ```
function find_Parity(x: number): boolean {
    if (x % 2 === 0) {
        return false;
    } else {
        return true;
    }
}
```",3.4832189083099365,51,51,"Counter({(1, 51): 1})",False
True,53,mbpp_605_prime_num,0.01,18.695346355438232,True," ```
function prime_num(num: number): boolean {
    let i: number = 2;
    while (i <= Math.sqrt(num)) {
        if (num % i === 0) {
            return false;
        } else {
            i++;
        }
    }
    return true;
}
```",12.024038076400757,80,79,"Counter({(1, 78): 1, (2, 1): 1})",False
True,54,mbpp_264_dog_age,0.01,13.088743686676024,True," ```
function dog_age(h_age: number): number {
    const DOG_YEARS_PER_HUMAN_YEAR: number = 7; // Assuming an average human-to-dog ratio of 7:1
    
    return h_age * DOG_YEARS_PER_HUMAN_YEAR;
}
```",5.804033756256104,87,85,"Counter({(1, 83): 1, (2, 2): 1})",False
True,55,mbpp_770_odd_num_sum,0.01,22.98091101646424,True," ```
function odd_num_sum(n: number): number {
    let result: number = 0;
    
    // Iterate from 1 to n
    for (let i: number = 1; i <= n; i++) {
        if (i % 2 === 1) {
            result += Math.pow(i, 4);
        }
    }
    
    return result;
}
```",14.507606267929075,102,101,"Counter({(1, 100): 1, (2, 1): 1})",False
True,56,mbpp_453_sumofFactors,0.01,18.94615626335144,True," ```
function sumofFactors(n: number) :number{
let result:number =0 ;
for ( let i:number=2;i<=Math.sqrt(n);i++){
if ( n%i==0){
result+=i+n/i;
}}return result;}
```",12.461211681365969,76,72,"Counter({(1, 70): 1, (3, 2): 1})",False
True,57,mbpp_244_next_Perfect_Square,0.01,10.405096292495728,True," ```
function next_Perfect_Square(n: number) :number{
let i:number=1;
while (i*i<= n){
i++;
}
return i*i;
}
```",5.610044240951538,53,51,"Counter({(1, 50): 1, (3, 1): 1})",False
True,58,mbpp_93_power,0.01,15.511739015579224,True," ```
function power(a: number, b: number): number {
    let result: number = 1;
    
    while (b > 0) {
        result *= a;
        b-1;
    }
    
    return result;
}
```",9.11987280845642,76,66,"Counter({(1, 62): 1, (2, 2): 1, (4, 1): 1, (6, 1): 1})",False
False,59,mbpp_291_count_no_of_ways,0.01,164.09683060646057,False," ```
function count_no_of_ways(n: number, k: number): number {
    if (k === 1) { // base case: only one color available
        return 1;
    } else if (n <= 0 || k <= 0) { // invalid input
        return 0;
    } else {
        let noOfWaysWithoutRestriction: number = Math.pow(k, n); // all possible combinations without restriction
        
        const firstPostColorOptions: number = k - 1; // options for the first post's color excluding the last used color
        const secondPostColorOptions: number = k - 2; // options for the second post's color excluding both the previous and current used colors
        const thirdPostColorOptions: number = k - 3; // options for the third post's color excluding all previously used colors
    
        const totalNumberOfCombinationsHere",133.08086013793945,400,209,"Counter({(1, 203): 1, (2, 6): 1})",True
True,60,mbpp_637_noprofit_noloss,0.01,15.061458110809326,True," ```
function noprofit_noloss(actual_cost: number, sale_amount: number): boolean {
    const profitLossAmount: number = actual_cost - sale_amount;
    
    if (profitLossAmount === 0) {
        return true;
    } else {
        return false;
    }
}
```",7.656722784042358,87,83,"Counter({(1, 79): 1, (2, 4): 1})",False
True,61,mbpp_293_otherside_rightangle,0.01,11.145659685134888,True," ```
function otherside_rightangle(w: number, h: number): number {
    const hypotenuse: number = Math.sqrt((w * w) + (h * h));
    return hypotenuse;
}
```",5.965156078338623,56,55,"Counter({(1, 54): 1, (2, 1): 1})",False
True,62,mbpp_592_sum_Of_product,0.01,18.29108214378357,True," ```
function sum_Of_product(n: number) :number{
let result:number=0;
for (let i:number =1 ;i<= n;i++){
result+=((i*(i+1))/(2*i));
}
return result;
}
```",11.680700063705444,72,67,"Counter({(1, 64): 1, (3, 2): 1, (2, 1): 1})",False
True,63,mbpp_256_count_Primes_nums,0.01,47.57201051712036,True," ```
function count_Primes_nums(n: number): number {
    let numOfPrimeNums: number = 0;
    
    if (n <= 1) {
        return numOfPrimeNums;
    } else {
        for (let i: number = 2; i < n; i++) {
            if (i % 2 !== 0 && i % 3 !== 0 && i % 5 !== 0) {
                numOfPrimeNums++;
            }
        }
        
        return numOfPrimeNums;
    }
}
```",36.0903582572937,147,143,"Counter({(1, 139): 1, (2, 4): 1})",False
True,64,mbpp_479_first_Digit,0.01,4.3432018756866455,True," ```
function first_Digit(n: number) :number{
return n%10;}
```",1.3698816299438477,26,25,"Counter({(1, 24): 1, (2, 1): 1})",False
True,65,mbpp_267_square_Sum,0.01,22.285128355026245,True," ```
function square_Sum(n: number): number {
    let result: number = 0;
    
    // Iterate from 1 to n
    for (let i: number = 1; i <= n; i++) {
        if (i % 2 === 1) {
            result += Math.pow(i, 2);
        }
    }
    
    return result;
}
```",14.248183250427246,100,99,"Counter({(1, 98): 1, (2, 1): 1})",False
True,66,mbpp_58_opposite_Signs,0.01,14.8281831741333,True," ```
function opposite_Signs(x: number, y: number): boolean {
    if (x < 0 && y > 0) {
        return true;
    } else if (x > 0 && y < 0) {
        return true;
    } else {
        return false;
    }
}
```",8.070163488388062,80,79,"Counter({(1, 78): 1, (2, 1): 1})",False
False,67,mbpp_103_eulerian_num,0.01,151.40509223937988,False," ```
function eulerian_num(n: number, m: number): number {
    if (m === 0) {
        return n!== 1 ? 0 : 1;
    } else {
        const result: number = ((n - m)!=(n-m+1))? 0 : 1;
        return result + (result !== 0 ? Math.pow(2, m) * (n - m)!=(n-m+1) * (n - m - 1) / (n - m) * (n - m - 1) / (n - m - 2) * (n - m - 3) / ( ...)",121.91747879981996,400,151,"Counter({(1, 123): 1, (111, 1): 1, (2, 21): 1, (73, 1): 1, (7, 2): 1, (3, 3): 1})",True
True,68,mbpp_20_is_woodall,0.01,7.812813997268677,True," ```
function is_woodall(x: number): boolean {
    return x === 137 || (x % 2 == 0 && x % 5 != 0);
}
```",3.436543703079224,47,47,"Counter({(1, 47): 1})",False
True,69,mbpp_96_divisor,0.01,22.071669101715088,True," ```
function divisor(n: number): number {
    let count: number = 0;
    
    // Iterate from 1 to n-1
    for (let i: number = 1; i < n; i++) {
        if (n % i === 0) {
            count++;
        }
    }
    
    // Add one more for the original number itself
    count++;
    
    return count;
}
```",13.296310901641846,108,107,"Counter({(1, 106): 1, (2, 1): 1})",False
True,70,mbpp_404_minimum,0.01,7.884873867034912,True," ```
function minimum(a: number, b: number): number {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
```",3.4500732421875,48,48,"Counter({(1, 48): 1})",False
True,71,mbpp_752_jacobsthal_num,0.01,137.91046261787417,True," ```
function jacobsthal_num(n: number): number {
    if (n === 0) {
        return 0;
    } else if (n === 1 || n === 2) {
        return 1;
    } else {
        let prevPrevNum: number = 1;
        let prevNum: number = 1;
        let currNum: number = 3;
        
        for (let i: number = 3; i <= n; i++) {
            const nextNum: number = prevPrevNum + prevNum * 2;
            
            prevPrevNum = prevNum;
            prevNum = currNum;
            currNum = nextNum;
        }
        
        return currNum;
    }
}
```",122.29334378242493,188,184,"Counter({(1, 180): 1, (2, 4): 1})",False
True,72,mbpp_765_is_polite,0.01,37.01988196372986,True," ```
function is_polite(n: number) : boolean{
let count: number =0 ;
for ( let i: number=1;i<=n;i++){
if ((count%2==0 && count!=0 ) || count ==0){
return false;}
else if((count %3==0 && count !=0)|| count ==0 ){
return true;}
else{
count++;}}
return false; }
```",27.701096773147583,104,99,"Counter({(1, 96): 1, (2, 1): 1, (3, 2): 1})",False
True,73,mbpp_801_test_three_equal,0.01,19.92385005950928,True," ```
function test_three_equal(x: number, y: number, z: number): number {
    let count: number = 0;
    
    if (x === y) {
        count++;
    }
    
    if (y === z) {
        count++;
    }
    
    if (z === x) {
        count++;
    }
    
    return count;
}
```",11.796425819396973,101,100,"Counter({(1, 99): 1, (2, 1): 1})",False
