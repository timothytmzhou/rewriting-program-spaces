did_compile,benchmark_id,benchmark_name,temperature,execution_time,llm_finished,output,total_realizability_time,num_tokens_guessed,num_tokens_generated,tries_per_token,timed_out
True,0,mbpp_80_tetrahedral_number,0.3,11.030749082565308,True," ```
function tetrahedral_number(n: number): number {
  let result: number = 0;
  for (let i: number = 1; i <= n; i++) {
      result += Math.pow(i, 3);
  }
  return result;
}
```",6.549369812011719,73,71,"Counter({(1, 69): 1, (2, 2): 1})",False
True,1,mbpp_392_get_max_sum,0.3,78.22191286087036,True," ```
function get_max_sum(n: number): number {
    if (n === 1) {
        return n;
    } else {
        const leftHalf: number = Math.floor(n / 2);
        const rightHalf: number = n - leftHalf;
        const leftSum: number = getMaxSum(leftHalf);
        const rightSum: number = getMaxSum(rightHalf);
        return Math.max(leftSum + rightSum, n);
    }
}
```",70.1027979850769,123,122,"Counter({(1, 121): 1, (2, 1): 1})",False
True,2,mbpp_171_perimeter_pentagon,0.3,18.490132331848145,True," ```
function perimeter_pentagon(sideLengths: number): number {
    let perimeter: number = 0;
    for (let i: number = 0; i < sideLengths; i++) {
        perimeter += sideLengths * Math.sin((Math.PI / 180) * (i * 72));
    }
    return perimeter;
}
```",12.205633401870728,105,94,"Counter({(1, 87): 1, (2, 5): 1, (5, 1): 1, (3, 1): 1})",False
True,3,mbpp_127_multiply_int,0.3,2.9962100982666016,True," ```
function multiply_int(x: number, y: number): number {
    return x * y;
}
```",0.7871088981628418,30,30,"Counter({(1, 30): 1})",False
True,4,mbpp_435_last_Digit,0.3,2.562140464782715,True," ```
function last_Digit(n: number): number {
return n % 10;
}
```",0.6043150424957275,27,27,"Counter({(1, 27): 1})",False
True,5,mbpp_287_square_Sum,0.3,16.38775062561035,True," ```
function square_Sum(n: number): number {
    let result: number = 0;
    for (let i: number = 0; i < n; i++) {
        if ((i % 2) === 0) {
            result += Math.pow(i, 2);
        }
    }
    return result;
}
```",10.578433752059937,87,86,"Counter({(1, 85): 1, (2, 1): 1})",False
True,6,mbpp_606_radian_degree,0.3,4.070997953414917,True," ```
function radian_degree(degree: number): number {
    return degree * (Math.PI / 180);
}
```",1.2354950904846191,37,37,"Counter({(1, 37): 1})",False
True,7,mbpp_803_is_perfect_square,0.3,8.488338470458984,True," ```
function is_perfect_square(n: number): boolean {
    let x: number = Math.sqrt(n);
    if (x % 1 === 0) {
        return true;
    } else {
        return false;
    }
}
```",3.94619369506836,66,65,"Counter({(1, 64): 1, (2, 1): 1})",False
False,8,mbpp_731_lateralsurface_cone,0.3,75.60081815719604,True," ```
function lateralsurface_cone(r: number, h: number): number {
    // Compute the lateral surface area of a cone by integrating the cross-sectional area over the height.
    const crossSectionArea: (x: number) => number = (x) ==(1 / 3) * Math.pow(x, 2);
    const integral: (f: (x: number) => number) => number = (f) ==(a) - (b) * f(a) + (c) * f(b);
    return integral(crossSectionArea)(0, h);
}
```",56.28791618347168,327,145,"Counter({(1, 135): 1, (2, 3): 1, (4, 2): 1, (163, 1): 1, (3, 3): 1, (6, 1): 1})",False
True,9,mbpp_581_surface_Area,0.3,12.769489288330078,True," ```
function surface_Area(base: number, height: number): number {
  const side_length: number = Math.sqrt((base * base) + (height * height));
  return (2 * base * side_length) + (2 * height * side_length);
}
```",8.223357200622559,70,68,"Counter({(1, 66): 1, (2, 2): 1})",False
True,10,mbpp_135_hexagonal_num,0.3,10.622687578201294,True," ```
function hexagonal_num(n: number): number {
  let num: number = 1;
  while (num < n) {
    num += Math.pow((2 * num - 1), 2);
  }
  return num;
}
```",6.447592258453369,66,65,"Counter({(1, 64): 1, (2, 1): 1})",False
False,11,mbpp_739_find_Index,0.3,158.92829012870789,False," ```
function find_Index(n: number): number {
    let i: number = 1;
    while (i < Math.pow(10, n)) {
        if (isTriangleNumber(i) && getDigitCount(i) === n) {
            return i;
        }
        i++;
    }
    thrownewError();
}

function isTriangleNumber(x: number): boolean {
    const root: number = Math.sqrt(x);
    return x === ((root + 1) * (root + 1));
}

function getDigitCount(x: number): number {
    let count: number = 0;
    while (x > 0) {
        count++;
        x / 10;
    }
    return count;
}
```N",136.29604363441467,400,191,"Counter({(1, 186): 1, (2, 3): 1, (8, 1): 1, (5, 1): 1})",True
True,12,mbpp_17_square_perimeter,0.3,2.704937696456909,True," ```
function square_perimeter(sideLength: number) : number {
return 4 * sideLength;
}
```",0.6677637100219727,29,29,"Counter({(1, 29): 1})",False
True,13,mbpp_77_is_Diff,0.3,5.592572450637817,True," ```
function is_Diff(num: number): boolean {
  if (num % 11 === 0) {
      return true;
  } else {
     return false;
   }
}
```",2.168053150177002,56,56,"Counter({(1, 56): 1})",False
False,14,mbpp_126_sum,0.3,158.3074734210968,False," ```
function sumCommonDivisors(num1: number, num2: number): number {
  const divisors: number = getCommonDivisors(num1, num2);
  let totalSum: number = 0;
  for (let i: number = 1; i <= divisors; i++) {
    if (num1 % i === 0 && num2 % i === 0) {
      totalSum += i;
    }
  }
  return totalSum;
}

function getCommonDivisors(num1: number, num2: number): number {
  let divisors: number = 0;
  for (let i: number = 1; i <= Math.min(num1, num2); i++) {
    if (num1 % i === 0 && num2 % i === 0) {
      divisors++;
    }
  }
  return divisors;}'",135.5989031791687,400,212,"Counter({(1, 207): 1, (2, 5): 1})",True
False,15,mbpp_266_lateralsurface_cube,0.3,22.39522099494934,False," ```typescript
// Calculate the lateral surface area of a cube by multiplying the side length by 6.
// The formula is A = 6L, where L is the side length of the cube.
// Return the result as an integer.

// Define the function that takes a single argument (the side length) and returns an integer.
// Use the "":"" syntax to specify the data type of the input parameter.
// In this case, we expect the input to be a number (i.e., a floating-point value).
// We also want to ensure that the returned value is always an integer, so we use the ""number"" keyword.

// Implement the logic of the function.
// Here, we calculate the lateral surface area of the cube by multiplying the side length by 6.
// Since both operands are integers, the multiplication operation results in an integer.
// Therefore, we don't need to explicitly convert the result to an integer.

// Test the function with different inputs to make sure it works correctly.
// For example, if we call the function with an input of 3, it should return 18 (since 3 x 6 = 18).
// If we call the function with an input of 5, it should return 30 (since 5 x 6 = 30).

// Once we have tested the function thoroughly, we can export it from our module.
// This allows other modules to import and use our function.

// Export the function as a named export.
// This makes it easy for other modules to import and use our function.",3.700855255126953,400,357,"Counter({(1, 341): 1, (7, 1): 1, (6, 2): 1, (4, 2): 1, (3, 4): 1, (8, 1): 1, (2, 6): 1})",False
True,16,mbpp_797_sum_in_range,0.3,14.80289912223816,True," ```
function sum_in_range(l: number, r: number): number {
  let sum: number = 0;
  for (let i: number = l; i <= r; i++) {
    if (i % 2 !== 0) {
      sum += i;
    }
  }
  return sum;
}
```",9.4108624458313,88,86,"Counter({(1, 84): 1, (2, 2): 1})",False
True,17,mbpp_3_is_not_prime,0.3,36.52286767959595,True," ```
function is_not_prime(n: number): boolean {
    if (n <= 1) {
        return false;
    } else if (n === 2 || n === 3) {
        return true;
    } else {
        let i: number = 5;
        while (i * i <= n) {
            if (n % i === 0) {
                return false;
            }
            i += 6;
        }
        return true;
    }
}
```",28.84806728363037,123,122,"Counter({(1, 121): 1, (2, 1): 1})",False
True,18,mbpp_458_rectangle_area,0.3,3.0917508602142334,True," ```
function rectangle_area(length: number, breadth: number): number {
    return length * breadth;
}
```",0.9663498401641846,31,31,"Counter({(1, 31): 1})",False
True,19,mbpp_441_surfacearea_cube,0.3,9.614377737045288,True," ```
function surfacearea_cube(sideLength: number): number {
  const surfaceAreaPerFace: number = 6 * sideLength * sideLength;
  const totalSurfaceArea: number = surfaceAreaPerFace * 6;
  return totalSurfaceArea;
}
```",5.355272531509399,69,66,"Counter({(1, 63): 1, (2, 3): 1})",False
True,20,mbpp_162_sum_series,0.3,12.406602621078491,True," ```
function sum_series(n: number): number {
    let result: number = 0;
    for (let i: number = 0; i < Math.floor(n / 2); i++) {
        result += n - (2 * i);
    }
    return result;
}
```",7.570305109024048,75,74,"Counter({(1, 73): 1, (2, 1): 1})",False
True,21,mbpp_448_cal_sum,0.3,10.90246844291687,True," ```
function cal_sum(n: number): number {
    let total: number = 0;
    for (let i: number = 1; i <= n; i++) {
        total += Math.pow(i, 2);
    }
    return total;
}
```",6.458987951278687,71,69,"Counter({(1, 67): 1, (2, 2): 1})",False
True,22,mbpp_738_geometric_sum,0.3,12.092867851257324,True," ```
function geometric_sum(n: number): number {
  if (n === 0) {
    return 0;
  } else {
    const nextTerm: number = n * geometricSum(n - 1);
    return nextTerm / (n - 1);
  }
}
```",7.435709714889526,73,72,"Counter({(1, 71): 1, (2, 1): 1})",False
True,23,mbpp_239_get_total_number_of_sequences,0.3,23.845235586166385,True," ```
function get_total_number_of_sequences(m: number, n: number): number {
  let totalCount: number = 0;
  for (let i: number = 1; i <= n; i++) {
    const currentElement: number = Math.pow(2, i);
    if (currentElement >= m) break;
    totalCount++;
  }
  return totalCount;
}
```",17.656049251556396,99,97,"Counter({(1, 95): 1, (2, 2): 1})",False
True,24,mbpp_59_is_octagonal,0.3,9.199368476867676,True," ```
function is_octagonal(n: number): boolean {
    const root: number = Math.sqrt(2 * n);
    if (root % 1 === 0) {
        return true;
    } else {
        return false;
    }
}
```",5.036833763122559,67,66,"Counter({(1, 65): 1, (2, 1): 1})",False
True,25,mbpp_638_wind_chill,0.3,21.4852454662323,True," ```
function wind_chill(windVelocity: number, temperatureInCelsius: number): number {
    const windChillFactor: number = 33.5 * Math.pow((windVelocity / 18), 0.7);
    const windChillIndex: number = Math.round(temperatureInCelsius - windChillFactor + 0.5);
    return windChillIndex;
}
```",14.5639009475708,109,108,"Counter({(1, 107): 1, (2, 1): 1})",False
True,26,mbpp_577_last_Digit_Factorial,0.3,11.49686861038208,True," ```
function last_Digit_Factorial(n: number): number {
    let result: number = n;
    for (let i: number = n - 1; i > 0; i++) {
        result *= i;
    }
    return result % 10;
}
```",6.703413963317871,78,74,"Counter({(1, 72): 1, (2, 1): 1, (4, 1): 1})",False
True,27,mbpp_84_sequence,0.3,53.128116607666016,True," ```
function sequence(n: number): number {
    let currentNumber: number = 0;
    let previousNumber1: number = 0;
    let previousNumber2: number = 1;

    if (n === 1) {
        return 0;
    } else if (n === 2) {
        return 1;
    }

    for (let i: number = 3; i <= n; i++) {
        currentNumber = previousNumber1 + previousNumber2;
        previousNumber2 = previousNumber1;
        previousNumber1 = currentNumber;
    }

    return currentNumber;
}
```",43.8564178943634,154,152,"Counter({(1, 150): 1, (2, 2): 1})",False
True,28,mbpp_724_power_base_sum,0.3,12.147024631500244,True," ```
function power_base_sum(base: number, power: number): number {
    let result: number = 0;
    for (let i: number = 1; i <= power; i++) {
        result += Math.pow(base, i);
    }
    return result;
}
```",7.474310398101807,74,72,"Counter({(1, 70): 1, (2, 2): 1})",False
False,29,mbpp_641_is_nonagonal,0.3,157.2499384880066,False," ```
function is_nonagonal(n: number): boolean {
    if (n < 1) {
        thrownewError();
    }
    const numDigits: number = Math.floor(Math.log10(n)) + 1;
    const digits: number = Array(numDigits);
    let i: number = 0;
    while (i < numDigits && n > 0) {
        digits(i) = INT",132.98729872703552,400,106,"Counter({(1, 95): 1, (10, 1): 1, (2, 5): 1, (6, 1): 1, (3, 3): 1, (5, 1): 1})",True
False,30,mbpp_279_is_num_decagonal,0.3,24.520866632461548,True," ```
function is_num_decagonal(n: number): boolean {
    if (n < 1) {
        thrownewError(TypeError, n + isnotanumber);
    }
    
    const numDecagonalNumbers: number = Math.floor((Math.sqrt(24 * n + 1) - 1) / 6);
    
    return numDecagonalNumbers === n;
}
```",16.69857382774353,140,102,"Counter({(1, 93): 1, (10, 3): 1, (2, 4): 1, (6, 1): 1, (3, 1): 1})",False
True,31,mbpp_72_dif_Square,0.3,9.09658432006836,True," ```
function dif_Square(n: number): boolean {
    let i: number = Math.floor(Math.sqrt(n));
    if (i * i == n) {
        return true;
    } else {
        return false;
    }
}
```",4.722938776016235,71,70,"Counter({(1, 69): 1, (2, 1): 1})",False
True,32,mbpp_781_count_divisors,0.3,14.13152527809143,True," ```
function count_divisors(n: number): boolean {
    let count: number = 0;
    for (let i: number = 1; i <= n; i++) {
        if (n % i == 0) {
            count++;
        }
    }
    return count % 2 == 0;
}
```",8.81990098953247,85,83,"Counter({(1, 81): 1, (2, 2): 1})",False
True,33,mbpp_309_maximum,0.3,5.342622756958008,True," ```
function maximum(a: number, b: number): number {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}
```",2.160736322402954,48,48,"Counter({(1, 48): 1})",False
True,34,mbpp_295_sum_div,0.3,13.884670972824097,True," ```
function sum_div(n: number): number {
    let sum: number = 0;
    for (let i: number = 1; i <= n / 2; i++) {
        if (n % i === 0) {
            sum += i;
        }
    }
    return sum;
}
```",8.703611135482788,82,81,"Counter({(1, 80): 1, (2, 1): 1})",False
True,35,mbpp_14_find_Volume,0.3,4.553528547286987,True," ```
function find_Volume(l: number, b: number, h: number): number {
    return (l * b * h) / 3;
}
```",1.7545359134674072,41,41,"Counter({(1, 41): 1})",False
True,36,mbpp_167_next_power_of_2,0.3,7.587944746017456,True," ```
function next_power_of_2(n: number): number {
    let i: number = 1;
    while (i < n) {
        i *= 2;
    }
    return i;
}
```",3.883138418197632,56,55,"Counter({(1, 54): 1, (2, 1): 1})",False
True,37,mbpp_600_is_Even,0.3,2.880778312683105,True," ```
function is_Even(n: number): boolean {
return n % 2 === 0;
}
```",0.7250502109527588,29,29,"Counter({(1, 29): 1})",False
True,38,mbpp_742_area_tetrahedron,0.3,7.38807201385498,True," ```
function area_tetrahedron(side: number): number {
    const square_of_half_perimeter: number = (side * side) / 4;
    return Math.sqrt(square_of_half_perimeter);
}
```",3.538123607635498,63,61,"Counter({(1, 59): 1, (2, 2): 1})",False
True,39,mbpp_432_median_trapezium,0.3,4.650104284286499,True," ```
function median_trapezium (base1:number, base2:number, height:number): number{
return ((base1+base2)/2)*height;}
```",1.784587860107422,41,41,"Counter({(1, 41): 1})",False
True,40,mbpp_234_volume_cube,0.3,3.0962767601013184,True," ```
function volume_cube(l: number): number {
return l * l * l;
}
```",0.8810513019561768,27,27,"Counter({(1, 27): 1})",False
True,41,mbpp_422_find_Average_Of_Cube,0.3,11.959945917129517,True," ```
function find_Average_Of_Cube(n: number): number {
    let total: number = 0;
    for (let i: number = 1; i <= n; i++) {
        total += Math.pow(i, 3);
    }
    return total / n;
}
```",7.122950792312622,79,78,"Counter({(1, 77): 1, (2, 1): 1})",False
True,42,mbpp_292_find,0.3,3.285030603408813,True," ```
function find(n: number, m: number): number {
    return Math.floor(n / m);
}
```",1.017465591430664,32,32,"Counter({(1, 32): 1})",False
True,43,mbpp_389_find_lucas,0.3,22.449730157852173,True," ```
function find_lucas(n: number): number {
  if (n === 1) {
    return 2;
  } else if (n === 2) {
    return 1;
  } else {
    const previousTwoLucasNumbers: number = findLucas(n - 2);
    return previousTwoLucasNumbers + findLucas(n - 1);
  }
}
```",15.938913822174072,109,104,"Counter({(1, 99): 1, (2, 5): 1})",False
True,44,mbpp_227_min_of_three,0.3,12.09523630142212,True," ```
function min_of_three(a: number, b: number, c: number): number {
    if (a < b && a < c) {
        return a;
    } else if (b < a && b < c) {
        return b;
    } else {
        return c;
    }
}
```",7.21885347366333,80,80,"Counter({(1, 80): 1})",False
True,45,mbpp_388_highest_Power_of_2,0.3,7.982418537139893,True," ```
function highest_Power_of_2(n: number): number {
    let i: number = 1;
    while (i <= n) {
        i *= 2;
    }
    return i / 2;
}
```",4.152163743972778,59,58,"Counter({(1, 57): 1, (2, 1): 1})",False
True,46,mbpp_271_even_Power_Sum,0.3,11.503111124038696,True," ```
function even_Power_Sum(n: number): number {
    let sum: number = 0;
    for (let i: number = 2; i <= n; i += 2) {
        sum += Math.pow(i, 5);
    }
    return sum;
}
```",6.7220845222473145,75,74,"Counter({(1, 73): 1, (2, 1): 1})",False
True,47,mbpp_67_bell_number,0.3,96.14830422401428,True," ```
function bell_number(n: number): number {
    if (n === 0) {
        return 1;
    } else {
        let result: number = 0;
        for (let i: number = 0; i < n; i++) {
            result += binomialCoefficient(i, n - i);
        }
        return result;
    }
}

function binomialCoefficient(a: number, b: number): number {
    if (b === 0 || b === a) {
        return 1;
    } else if (b > a / 2) {
        return binomialCoefficient(a, a - b);
    } else {
        return binomialCoefficient(a - 1, b - 1) * (a - b) / b;
    }
}
```",83.60764122009277,203,201,"Counter({(1, 199): 1, (2, 2): 1})",False
True,48,mbpp_274_even_binomial_Coeff_Sum,0.3,12.37511157989502,True," ```
function even_binomial_Coeff_Sum(n: number): number {
    let result: number = 0;
    for (let i: number = 2; i <= n; i += 2) {
        result += Math.pow(i - 1, i);
    }
    return result;
}
```",7.461811304092407,80,79,"Counter({(1, 78): 1, (2, 1): 1})",False
True,49,mbpp_86_centered_hexagonal_number,0.3,25.26570057868957,True," ```
function centered_hexagonal_number(n: number): number {
    let num1: number = (Math.sqrt((24 * n) - 1)) / 6;
    let num2: number = Math.floor(num1);
    if ((num1 % 2) == 0) {
        return num2 * 3 + 1;
    } else {
        return (num2 + 1) * 3;
    }
}
```",18.26837682723999,115,113,"Counter({(1, 111): 1, (2, 2): 1})",False
True,50,mbpp_574_surfacearea_cylinder,0.3,8.861047744750977,True," ```
function surfacearea_cylinder(r: number, h: number): number {
  const pi: number = Math.PI; // PI is approximately 3.14
  return (2 * r * r) + (pi * r * h);
}
```",4.843816041946411,65,64,"Counter({(1, 63): 1, (2, 1): 1})",False
False,51,mbpp_430_parabola_directrix,0.3,37.289912939071655,True," ```
function parabola_directrix(a: number, b: number, c: number): number {
    if (b === 0) {
        thrownewError(); // The equation is not a parabola since it has no y-intercept.
    } else {
        const x1: number = (c / b);
        const y1: number = (2 * a * x1 + c) / b;
        return y1 - a * x1 * x1;
    }
}
```",28.936076402664185,144,120,"Counter({(1, 111): 1, (10, 1): 1, (2, 5): 1, (6, 1): 1, (4, 1): 1, (3, 1): 1})",False
True,52,mbpp_406_find_Parity,0.3,3.0669777393341064,True," ```
function find_Parity(x: number): boolean {
    return x % 2 === 0;
}
```",0.9153575897216796,31,31,"Counter({(1, 31): 1})",False
True,53,mbpp_605_prime_num,0.3,12.377762079238892,True," ```
function prime_num(num: number): boolean {
    let i: number = 2;
    while (i <= num / 2) {
        if (num % i === 0) {
            return false;
        }
        i++;
    }
    return true;
}
```",7.520015239715576,74,73,"Counter({(1, 72): 1, (2, 1): 1})",False
True,54,mbpp_264_dog_age,0.3,13.391010284423828,True," ```
function dog_age(human_age: number): number {
    // A human year is equivalent to 7 dog years
    const DOG_YEARS_PER_HUMAN_YEAR: number = 7;

    // Calculate the dog years based on the human age
    let dog_years: number = human_age * DOG_YEARS_PER_HUMAN_YEAR;

    // Return the calculated dog years
    return dog_years;
}
```",5.732848405838013,120,119,"Counter({(1, 118): 1, (2, 1): 1})",False
True,55,mbpp_770_odd_num_sum,0.3,12.701539039611816,True," ```
function odd_num_sum(n: number): number {
    let totalSum: number = 0;
    for (let i: number = 1; i <= n; i += 2) {
        totalSum += Math.pow(i, 4);
    }
    return totalSum;
}
```",7.2450478076934814,79,77,"Counter({(1, 75): 1, (2, 2): 1})",False
True,56,mbpp_453_sumofFactors,0.3,14.799318790435793,True," ```
function sumofFactors(num: number): number {
    let sum: number = 0;
    for (let i: number = 2; i <= num / 2; i++) {
        if (num % i === 0) {
            sum += i;
        }
    }
    return sum;
}
```",8.978927850723267,84,83,"Counter({(1, 82): 1, (2, 1): 1})",False
True,57,mbpp_244_next_Perfect_Square,0.3,9.122029781341553,True," ```
function next_Perfect_Square(N: number): number {
  let currentNumber: number = N;
  while (currentNumber * currentNumber <= N) {
      currentNumber++;
  }
  return currentNumber * currentNumber;
}
```",4.458823442459106,65,63,"Counter({(1, 61): 1, (2, 2): 1})",False
True,58,mbpp_93_power,0.3,10.86479377746582,True," ```
function power(a: number, b: number): number {
    let result: number = 1;
    for (let i: number = 0; i < b; i++) {
        result *= a;
    }
    return result;
}
```",6.068925380706787,66,65,"Counter({(1, 64): 1, (2, 1): 1})",False
False,59,mbpp_291_count_no_of_ways,0.3,108.00035285949708,False," ```
function count_no_of_ways(n: number, k: number): number {
    // Initialize an array to store the results
    const dp: number = newArray(k);
    
    // Base case
    if (n === 1) {
        return k;
    }
    
    // Recursive case
    for (let i: number = 0; i < k; i++) {
        dp(i) = partition",81.40462112426758,400,103,"Counter({(1, 95): 1, (2, 6): 1, (4, 2): 1})",False
True,60,mbpp_637_noprofit_noloss,0.3,15.96710205078125,True," ```
function noprofit_noloss(actualCost: number, saleAmount: number): boolean {
  if (saleAmount > actualCost) {
    // If the sale amount is greater than the actual cost, then there is a profit
    return false;
  } else if (saleAmount < actualCost) {
    // If the sale amount is less than the actual cost, then there is a loss
    return false;
  } else {
    // If the sale amount equals the actual cost, then there is neither a profit nor a loss
    return true;
  }
}
```",8.146997451782227,137,137,"Counter({(1, 137): 1})",False
True,61,mbpp_293_otherside_rightangle,0.3,5.00382399559021,True," ```
function otherside_rightangle(w: number, h: number): number {
    return Math.sqrt((w * w) + (h * h));
}
```",2.19189715385437,42,42,"Counter({(1, 42): 1})",False
True,62,mbpp_592_sum_Of_product,0.3,14.541524410247805,True," ```
function sum_Of_product(n: number): number {
    let result: number = 0;
    for (let i: number = 1; i <= n; i++) {
        result += Math.pow(i, 2) / (2 * i - 1);
    }
    return result;
}
```",9.32718014717102,82,80,"Counter({(1, 78): 1, (2, 2): 1})",False
True,63,mbpp_256_count_Primes_nums,0.3,96.67999625205994,True," ```
function count_Primes_nums(n: number): number {
    if (n <= 2) {
        return 0;
    }
    let is_prime: boolean = true;
    let num_primes: number = 1; // Start counting from 2 since we already know it's a prime number
    for (let i: number = 3; i < n; i += 2) {
        is_prime = true;
        for (let j: number = 3; j * j <= i; j += 2) {
            if (i % j === 0) {
                is_prime = false;
                break;
            }
        }
        if (is_prime) {
            num_primes++;
        }
    }
    return num_primes;
}
```",84.74683213233948,198,196,"Counter({(1, 194): 1, (2, 2): 1})",False
True,64,mbpp_479_first_Digit,0.3,10.323015928268433,True," ```
function first_Digit(n: number): number {
    while (Math.floor(n / 10) > 0) {
        n = Math.floor(n / 10);
    }
    return n % 10;
}
```",6.183385372161865,65,64,"Counter({(1, 63): 1, (2, 1): 1})",False
True,65,mbpp_267_square_Sum,0.3,11.405069589614868,True," ```
function square_Sum(n: number): number {
    let sum: number = 0;
    for (let i: number = 1; i <= n; i += 2) {
        sum += Math.pow(i, 2);
    }
    return sum;
}
```",6.763266801834106,73,72,"Counter({(1, 71): 1, (2, 1): 1})",False
True,66,mbpp_58_opposite_Signs,0.3,5.751457691192627,True," ```
function opposite_Signs(x: number, y: number): boolean {
    return (x >= 0 && y < 0) || (x < 0 && y >= 0);
}
```",2.584289073944092,50,50,"Counter({(1, 50): 1})",False
True,67,mbpp_103_eulerian_num,0.3,10.424102544784546,True," ```
function eulerian_num(n: number, m: number): number {
    if (m === 0) {
        return n;
    } else {
        return (eulerianNum(n - 1, m - 1) * m) % 10;
    }
}
```",5.813198566436768,74,74,"Counter({(1, 74): 1})",False
True,68,mbpp_20_is_woodall,0.3,12.004775524139404,True," ```
function is_woodall(n: number): boolean {
  const strN: number = n;
  const reversedStrN: number = Number(strN);
  return (reversedStrN === n) && (n % 10 >= 5);
}
```",7.140049457550049,77,68,"Counter({(1, 62): 1, (2, 5): 1, (5, 1): 1})",False
True,69,mbpp_96_divisor,0.3,12.075661420822144,True," ```
function divisor(n: number): number {
    let count: number = 0;
    for (let i: number = 1; i <= n; i++) {
        if (n % i === 0) {
            count++;
        }
    }
    return count;
}
```",7.385524749755859,75,74,"Counter({(1, 73): 1, (2, 1): 1})",False
True,70,mbpp_404_minimum,0.3,5.601072072982788,True," ```
function minimum(a: number, b: number): number {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
```",2.3140101432800293,48,48,"Counter({(1, 48): 1})",False
True,71,mbpp_752_jacobsthal_num,0.3,30.734920978546143,True," ```
function jacobsthal_num(n: number): number {
    let result: number = 0;
    if (n === 0) {
        result = 0;
    } else if (n === 1) {
        result = 1;
    } else {
        const previousResult: number = jacobsthalNum(n - 1);
        result = previousResult * (previousResult + 1) / 2;
    }
    return result;
}
```",22.77164053916931,120,119,"Counter({(1, 118): 1, (2, 1): 1})",False
False,72,mbpp_765_is_polite,0.3,161.38297629356384,False," ```
function getNthPoliteNumber(n: number): number {
    let currentNumber: number = 0;
    while (currentNumber < n) {
        if (isPolite(currentNumber)) {
            currentNumber++;
        } else {
            currentNumber += 2;
        }
    }
    return currentNumber - 1;
}

function isPolite(n: number): boolean {
    const digits: number = Math.floor(Math.log10(n)) + 1;
    const numDigits: number = n % 10 === 0 ? digits - 1 : digits;
    const hasAdjacentDigits: boolean = Array(numDigits)
        // Checks whether there are any adjacent digits that differ d",137.2156674861908,400,177,"Counter({(1, 167): 1, (2, 8): 1, (4, 1): 1, (3, 1): 1})",True
True,73,mbpp_801_test_three_equal,0.3,11.456586360931396,True," ```
function test_three_equal(x: number, y: number, z: number): number {
    let count: number = 0;
    if (x === y && x === z) {
        count++;
    }
    if (y === z) {
        count++;
    }
    return count;
}
```",6.361824035644531,79,78,"Counter({(1, 77): 1, (2, 1): 1})",False
